.. |bgn-h3| raw:: html

     <h3>

.. |end-h3| raw:: html

     </h3>



class utility
-------------
The CO\ *N*\ CEPT 'class' utility enables easy access to linear perturbations
(and background quantities) outside of CO\ *N*\ CEPT, e.g. for use with other
simulation codes. In a nutshell, a cosmology is specified to CO\ *N*\ CEPT
using the standard :doc:`parameter specification </parameters/cosmology>`,
with which CO\ *N*\ CEPT calls `CLASS <http://class-code.net/>`_ in order to
obtain the required perturbation data. All perturbations are then processed;
interpolating them onto a common :math:`(a, k)` grid, and typically also
transforming them to *N*-body gauge. The resulting data is saved to an HDF5
file, ready to be used for e.g. initial condition generation or gravitational
corrections on matter particles from linear species such as neutrinos. The
`pkdgrav3 <https://bitbucket.org/dpotter/pkdgrav3/>`_ code is able to fully
utilise such HDF5 files generated by the CO\ *N*\ CEPT class utility, enabling
simulations fully consistent with general relativistic perturbation theory.


.. tip::
   If you are unfamiliar with the basic framework of the *N*-body gauge for
   cosmological simulations, you might want to check out the paper on
   ':ref:`Fully relativistic treatment of light neutrinos in ùòï-body simulations <fully_relativistic_treatment_of_light_neutrinos_in_nbody_simulations>`'.
   It is also advisable to have gone through the CO\ *N*\ CEPT
   :doc:`tutorial </tutorial/tutorial>` at least up to (and including) the
   first subsection of :ref:`beyond matter-only simulations <radiation>`.

Entries on this page:

.. contents::
   :local:
   :depth: 1



.. _basic_usage:

Basic usage
...........
A basic invocation of the CO\ *N*\ CEPT class utility looks like

.. code-block:: bash

   ./concept \
       -u class \
           --kmin <kmin> --kmax <kmax> \
           <perturbations>

where ``<kmin>`` and ``<kmax>`` specify the :math:`k` range while
``<perturbations>`` is a string of comma-separated perturbation
specifications. As an example, the below processes :math:`\delta` and
:math:`\theta` perturbations for 'total matter' (combined baryons and cold
dark matter), as well as :math:`\delta` perturbations for photons and massless
neutrinos, in the interval
:math:`10^{-3}\,\text{Mpc}^{-1} \leq k \leq 1 \text{Mpc}^{-1}`:

.. code-block:: bash

   ./concept \
       -u class \
           --kmin 1e-3/Mpc --kmax 1/Mpc \
           "b+cdm:1, g:0, ur:0"

Each specification within ``<perturbations>`` consists of a CLASS species and
a "Boltzmann order" separated by a colon. Commonly used CLASS species include

* ``b``: Baryons.
* ``cdm``: Cold dark matter.
* ``g``: Photons.
* ``ur``: Massless neutrinos.
* ``ncdm[0]``, ``ncdm[1]``, ``ncdm[2]``, ... : Massive neutrinos.
* ``metric``: Fictitious species providing relativistic corrections (not a
  standard CLASS species, provided by CO\ *N*\ CEPT).

As in the above example, two (or more) species may be joined using ``+``,
leading to combined, weighted perturbations.

The available Boltzmann orders are

* ``0``: Process :math:`\delta` (energy density contrast) perturbations.
* ``1``: Process :math:`\delta` and :math:`\theta` (velocity divergence)
  perturbations.
* ``2``: Process :math:`\delta`, :math:`\theta`, :math:`\delta P` (pressure)
  and :math:`\sigma` (shear stress) perturbations.

The Boltzmann order defaults to ``0`` if left out.

Running the CO\ *N*\ CEPT class utility as above will produce a file named
``class_processed.hdf5`` within the ``output`` directory, containing the
specified perturbations as well as various background quantities. The contents
of these HDF5 files can be explored using tools such as
`ViTables <https://vitables.org/>`_, but is also described
:ref:`below <file_contents>`.

For selection of the times (scale factor :math:`a` values), see the
``--times`` :ref:`command-line option<times>`.

For selection of the :math:`k` modes, see the
``--modes`` :ref:`command-line option<fourier_modes>`.



Command-line options
....................
Below the possible command-line options to the CO\ *N*\ CEPT class utility are
described, i.e. additional options to the ``concept`` script allowed once
``-u class`` is supplied. For the ``<perturbations>`` option, see
:ref:`basic usage <basic_usage>` above.
See :doc:`this page </command_line_options>` for the
command-line options to the ``concept`` script in general, and specifically
:ref:`this section <utility>` for how standard command-line options are used
together with utility specific ones.



Help: ``-h``, ``--help``
~~~~~~~~~~~~~~~~~~~~~~~~
Displays a short description of each command-line option to the class utility
and exits:

.. code-block:: bash

   ./concept -u class -h



.. _minimum_fourier_mode:

Minimum Fourier mode: ``--kmin``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Sets the minimum needed Fourier :math:`k` mode for the perturbations. For e.g.
:math:`k \geq 5\times 10^{-4}\, \text{Mpc}^{-1}`:

.. code-block:: bash

   ./concept -u class --kmin 5e-4/Mpc

.. note::
   A small tolerance is automatically applied so that the actual lowest
   :math:`k` mode will be slightly below what is specified.



.. _maximum_fourier_mode:

Maximum Fourier mode: ``--kmax``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Sets the maximum needed Fourier :math:`k` mode for the perturbations. For e.g.
:math:`k \leq 2\, \text{Mpc}^{-1}`:

.. code-block:: bash

   ./concept -u class --kmax 2/Mpc

.. note::
   A small tolerance is automatically applied so that the actual largest
   :math:`k` mode will be slightly above what is specified.

.. tip::
   Try not to specify a maximum :math:`k` much larger than what you need, as
   the CLASS computation time for each mode grows rapidly with :math:`k`.



.. _fourier_modes:

Fourier modes: ``--modes``
~~~~~~~~~~~~~~~~~~~~~~~~~~
When specified as an integer, this sets the total number of Fourier :math:`k`
modes for the perturbations. E.g.

.. code-block:: bash

   ./concept -u class --modes 128

The placement of the :math:`k` modes at which to tabulate the perturbations
are chosen based on the :ref:`minimum <minimum_fourier_mode>` and
:ref:`maximum <maximum_fourier_mode>` mode together with the
``k_modes_per_decade`` :ref:`parameter <k_modes_per_decade>`. When the
``--modes`` option is *not* specified, ``k_modes_per_decade`` is used as is,
leading to some number of total modes. When the ``--modes`` option *is*
specified, the numbers of modes per decade within ``k_modes_per_decade`` are
all uniformly scaled in order to yield the requested number of modes.

.. tip::
   If you simply want some definite number (say :math:`128`) of logarithmically
   equidistant modes, you can do e.g.

   .. code-block:: bash

      ./concept -u class --modes 128 -c "k_modes_per_decade = 1"

.. tip::
   If the processed perturbations are intended for use with pkdgrav3, note
   that a maximum number of :math:`256` modes is allowed.

Other allowed specifications for ``--modes`` are:

* Explicit :math:`k` values at which to perform the tabulation, specified as
  any valid Python expression, e.g.

  .. code-block:: bash

     ./concept -u class --modes "array([1e-2, 1e-1, 1])/Mpc"

* Path to text file containing values of :math:`k`. It is assumed that the
  data within this file is expressed in the same units as
  :doc:`used </parameters/units>` by the current CO\ *N*\ CEPT run.
* Path to HDF5 file produced using the CO\ *N*\ CEPT class utility.
  The :math:`k` values to use will be taken from the tabulated perturbations
  within this file.

In all cases, the :ref:`minimum <minimum_fourier_mode>` and
:ref:`maximum <maximum_fourier_mode>` modes are respected, with :math:`k`
values outside this range being dropped.



.. _times:

Times: ``--times``
~~~~~~~~~~~~~~~~~~
When specified as an integer, this sets the total number of times
(scale factor :math:`a` values) at which to tabulate the perturbations. E.g.

.. code-block:: bash

   ./concept -u class --times 512

When not specified, this defaults to ``1024`` times. The placement of the
tabulation times follows that which is used by CLASS, providing denser
sampling around epochs of greater change.

.. note::
   If the raw perturbations from the CLASS computation are tabulated at fewer
   points in time than requested, no additional times will be added. It is
   thus possible that the processed perturbations are tabulated at fewer times
   than requested through ``--times`` (though this should not happen for
   reasonable values).

The :math:`a` values will be within the interval
:math:`a_{\text{begin}} \leq a \leq 1`, with the ``a_begin``
:ref:`parameter <a_begin>` specifying the lower boundary.

.. note::
   A small tolerance is automatically applied so that the actual smallest
   :math:`a` value will be slightly below what is specified
   through ``a_begin``.

.. tip::
   If the processed perturbations are intended for use with pkdgrav3, note
   that a maximum number of :math:`1024` times is allowed.

Other allowed specifications for ``--times`` are:

* Explicit :math:`a` values at which to perform the tabulation, specified as
  any valid Python expression, e.g.

  .. code-block:: bash

     ./concept -u class --times "[1/(1 + z) for z in linspace(0, 99, 512)]"

* Path to text file containing values of :math:`a`.
* Path to HDF5 file produced using the CO\ *N*\ CEPT class utility.
  The :math:`a` values to use will be taken from the tabulated perturbations
  within this file.



.. _gauge:

Gauge: ``--gauge``
~~~~~~~~~~~~~~~~~~
Sets the gauge of the processed perturbations. E.g.

.. code-block:: bash

   ./concept -u class --gauge N-body

The available gauges are:

* ``N-body``: The *N*-body gauge (default).
* ``synchronous``: The synchronous gauge.
* ``Newtonian``: The conformal Newtonian (also know as the longitudinal)
  gauge.

When the *N*-body gauge is selected, CLASS is really run in synchronous gauge,
with the perturbations transformed to *N*-body gauge by CO\ *N*\ CEPT.



.. _file_contents:

File contents
.............
The result of a CO\ *N*\ CEPT class utility computation is a file called
``class_processed.hdf5``, containing the requested perturbations as well as
background quantities. As mentioned earlier, the contents of HDF5 files are
conveniently explored using a graphical tool like
`ViTables <https://vitables.org/>`_. Details of the contents of
``class_processed.hdf5`` are described below.



.. _data_layout:

Data layout
~~~~~~~~~~~
The data layout within ``class_processed.hdf5`` is as follows:

* ``background``: Group containing various background quantities, tabulated
  at a common 1D time grid:

  * ``a``: Data set of scale factor :math:`a` values at which all background
    quantities are tabulated.
  * ``z``: Data set of redshift :math:`z` values at which all background
    quantities are tabulated.
  * ``t``: Data set of cosmic time :math:`t` values at which all background
    quantities are tabulated.
  * ``H``: The Hubble parameter :math:`H`.
  * ``rho_<species>`` with ``<species>`` some CLASS species: The background
    energy density :math:`\bar{\rho}` of the given species. The critical
    '``crit``' and total '``tot``' energy densities are present as well.
  * ``p_<species>`` with ``<species>`` some CLASS species: The background
    pressure :math:`\bar{P}` of the given species.

  When running the CO\ *N*\ CEPT class utility, the ``class_extra_background``
  :ref:`parameter <class_extra_background>` is by default populated with the
  following values:

  .. code-block:: python3

     class_extra_background = {'tau', 'D', 'f', 'D2', 'f2'}

  which then further adds the following background quantities:

  * ``tau``: The conformal time :math:`\tau`.
  * ``D``: First-order (linear) growth factor :math:`D = D^{(1)}`.
  * ``f``: First-order (linear) growth rate
    :math:`f = f^{(1)} \equiv \mathrm{d}\ln D / \mathrm{d}\ln a`.
  * ``D2``: Second-order growth factor :math:`D^{(2)}`.
  * ``f2``: Second-order growth rate
    :math:`f^{(2)} \equiv \mathrm{d}\ln D^{(2)} / \mathrm{d}\ln a`.

  In addition to the above datasets, this group also stores some attributes,
  namely the reduced Hubble constant ``h`` (given by
  :math:`h \equiv H_0/(100\, \text{km}\, \text{s}^{-1}\, \text{Mpc}^{-1})` as
  well as density parameters ``Omega_<species>`` for the various species.

* ``perturbations``: Group containing the specified perturbations,
  tabulated at a common 2D :math:`(a, k)` grid:

  * ``a``: Data set of scale factor :math:`a` values at which all
    perturbations are tabulated.
  * ``k``: Data set of Fourier modes :math:`k` at which all perturbations are
    tabulated.
  * ``delta_<species>``: The :math:`\delta` perturbations of the given
    species.
  * ``theta_<species>``: The :math:`\theta` perturbations of the given
    species.
  * ``deltaP_<species>``: The :math:`\delta P` perturbations of the given
    species.
  * ``sigma_<species>``: The :math:`\sigma` perturbations of the given
    species.

  In addition to the above datasets, this group also stores a ``gauge``
  attribute, specifying the gauge of the perturbations.

* ``class_params``: Group containing no data sets, but with all CLASS
  parameters used for the CLASS computation stored as attributes. That is,
  the attributes within this group contain all information needed to do a
  CLASS run identical to the one carried out by the CO\ *N*\ CEPT class
  utility.

  .. note::
     One of these CLASS parameters is ``gauge``. When running the
     CO\ *N*\ CEPT class utility in *N*-body :ref:`gauge <gauge>` (the
     default), CLASS is really run in synchronous gauge (with the results
     transformed to *N*-body gauge by CO\ *N*\ CEPT), and so the ``gauge``
     attribute inside the ``class_params`` group will be set to
     ``'synchronous'``. For the actual gauge in which the perturbations are
     expressed, see the ``gauge`` attribute on the ``perturbations`` group.

* ``units``: Group containing no data sets, but with attributes storing the
  units used for the data throughout the file:

  * ``unit length``: The length unit used. By default this is ``Mpc``.
  * ``unit time``: The time unit used. By default this is ``Gyr``.
  * ``unit mass``: The time unit used. By default this is ``10**10*m_sun``
    (:math:`10^{10}\, m_{\odot}`).



Extra output
~~~~~~~~~~~~
The :ref:`above <data_layout>` lists of background and perturbation quantities
are what end up in the processed HDF5 file by default, though the raw CLASS
computation contains other quantities as well. You may request these other
quantities by listing them in the ``class_extra_background``
:ref:`parameter <class_extra_background>` and the
``class_extra_perturbations`` :ref:`parameter <class_extra_perturbations>`.

As an example, the below requests the comoving distance as an extra background
quantity, as well as the conformal Newtonian metric potentials :math:`\phi`
and :math:`\psi` as extra perturbations:

.. code-block:: bash
   :emphasize-lines: 5-6

   ./concept \
       -u class \
           --kmin <kmin> --kmax <kmax> \
           <perturbations> \
       -c "class_extra_background = 'comov. dist.'" \
       -c "class_extra_perturbations = {'œï', 'œà'}"

.. note::
   While the various perturbations in general depend on the
   :ref:`chosen gauge <gauge>`, this is not so for the gauge specific
   metric perturbations ``œï``, ``œà``, ``h π`` and ``H_T π``, which are
   always given in their definite gauges. Also, ``h π`` is not available when
   running in conformal Newtonian gauge.

.. caution::
   The units of the various quantities within ``class_processed.hdf5`` are
   described below. If adding an extra CLASS quantity via
   ``class_extra_background`` or ``class_extra_perturbations`` that is unknown
   to CO\ *N*\ CEPT, unit convertion will not be carried out, and the quantity
   will be provided exactly as CO\ *N*\ CEPT got it from CLASS. If this
   happens, a warning will be emitted.



Units
~~~~~
As written :ref:`above <data_layout>`, the ``units`` group contains the base
units used for all data within the file, with the default base units being
:math:`\text{Mpc}`, :math:`\text{Gpc}` and :math:`10^{10}\, m_{\odot}`. Given
these default base units, the table below lists the full units in which the
various data sets are expressed:

.. table::
   :align: center

   ======================================================================  ============================
   .. centered:: Quantity                                                  .. centered:: Unit (default)
   ======================================================================  ============================
   Scale factor ``a`` and redshift ``z``                                   .. centered:: :math:`[1]`
   Cosmic time ``t`` and conformal time ``tau``                            .. centered:: :math:`[\text{Gyr}]`
   Fourier mode ``k``                                                      .. centered:: :math:`[\text{Mpc}^{-1}]`
   Hubble parameter ``H``                                                  .. centered:: :math:`[\text{Gyr}^{-1}]`
   Growth factors ``D``, ``D2`` and rates ``f``, ``f2``                    .. centered:: :math:`[1]`
   Background energy density ``rho``                                       .. centered:: :math:`[10^{10}\, m_{\odot}\, \text{Mpc}^{-3}]`
   Energy density contrast ``delta``                                       .. centered:: :math:`[1]`
   Velocity divergence ``theta``                                           .. centered:: :math:`[\text{Gyr}^{-1}]`
   Pressure background ``p`` and perturbation ``deltaP``                   .. centered:: :math:`[10^{10}\, m_{\odot}\, \text{Mpc}^{-1}\,\text{Gyr}^{-2}]`
   Shear stress ``sigma``                                                  .. centered:: :math:`[\text{Mpc}^2\,\text{Gyr}^{-2}]`
   Metric perturbations ``phi`` and ``psi``                                .. centered:: :math:`[\text{Mpc}^2\,\text{Gyr}^{-2}]`
   Time derivatives of metric perturbations ``h_prime`` and ``H_T_prime``  .. centered:: :math:`[\text{Gyr}^{-1}]`
   ======================================================================  ============================

.. tip::
   If you need the Hubble parameter ``H`` in its canonial units of
   :math:`\text{km}\, \text{s}^{-1}\, \text{Mpc}^{-1}`, you can convert it by
   multiplying the values as follows:

   .. math::
      \require{upgreek}
      H \rightarrow 1\times H &\equiv \frac{1495978707}{487000\uppi}\, \frac{\text{km}\, \text{s}^{-1}\, \text{Mpc}^{-1}}{\text{Gyr}^{-1}} H \\
      &= 977.7922216807892\, \frac{\text{km}\, \text{s}^{-1}\, \text{Mpc}^{-1}}{\text{Gyr}^{-1}} H

.. tip::
   The background energy densities ``rho`` are really expressed in units of
   *mass* densities. If you need these in energy density units, multiply by
   the speed of light squared:

   .. math::
      \require{upgreek}
      \rho \rightarrow \rho c^2\,, \quad c &\equiv \frac{1999985302\uppi}{20492859}\, \text{Mpc}\, \text{Gyr}^{-1} \\
      &= 306.60139378555056\, \text{Mpc}\, \text{Gyr}^{-1}

.. note::
   The base unit system in which to express the data within
   ``class_processed.hdf5`` may be changed through the ``unit_length``,
   ``unit_time`` and ``unit_mass`` :doc:`parameters </parameters/units>`.



Complete example (massive neutrinos)
....................................
Here follows a complete code example for a CO\ *N*\ CEPT class utility
computation of a cosmology involving massive neutrinos.

The cosmology for which we want to compute the linear perturbations is
specified by the following table:

.. table::
   :align: center

   ========================================================  ===================
   .. centered:: Parameter                                   .. centered:: Value
   ========================================================  ===================
   .. centered:: :math:`H_0`                                 .. centered:: :math:`67\, \text{km}\, \text{s}^{-1}\, \text{Mpc}^{-1}`
   .. centered:: :math:`\Omega_{\text{b}}`                   .. centered:: :math:`0.049`
   .. centered:: :math:`\Omega_{\text{cdm}} + \Omega_{\nu}`  .. centered:: :math:`0.27`
   .. centered:: :math:`T_{\gamma}`                          .. centered:: :math:`2.7255\, \text{K}`
   .. centered:: :math:`N_{\text{eff}}`                      .. centered:: :math:`3.046`
   .. centered:: :math:`m_{\nu_{1}}`                         .. centered:: :math:`0\, \text{eV}`
   .. centered:: :math:`m_{\nu_{2}}`                         .. centered:: :math:`8.7\times 10^{-3}\, \text{eV}`
   .. centered:: :math:`m_{\nu_{3}}`                         .. centered:: :math:`5.0\times 10^{-2}\, \text{eV}`
   ========================================================  ===================

The total neutrino density parameter
:math:`\Omega_{\nu} = \Omega_{\nu_1} + \Omega_{\nu_2} + \Omega_{\nu_3}` is
implicitly set through the effective number of neutrino species
:math:`N_{\text{eff}}` together with the neutrino masses :math:`m_1`,
:math:`m_2`, :math:`m_3`. The neutrino temperature :math:`T_{\nu}` (equal for
all three species) is related to the photon temperature :math:`T_{\gamma}` by

.. math::
   T_{\nu} = \biggl(\frac{4}{11}\biggr)^{1/3} \biggl(\frac{N_{\text{eff}}}{3}\biggr)^{1/4} T_{\gamma} \,.

.. note::
   We do not need to specify any parameters having to do with the
   primordial spectrum (e.g. :math:`A_{\text{s}}` and :math:`n_{\text{s}}`) as
   these do not enter the linear CLASS computation.

The below parameter file implements the above neutrino cosmology, though
written in a way that allows one to easily change the number of neutrino
species:

.. code-block:: python3
   :caption: class-param
   :name: class-param

   # Input/output
   output_dirs = param.dir

   # Cosmology
   H0 = 67*km/(s*Mpc)
   Œ©b = 0.049
   Œ©cdm = 0.27 - Œ©ŒΩ
   a_begin = 1/(1 + 99)
   _mŒΩ = [0, 8.7e-3, 5.0e-2]  # neutrino masses in eV
   _N_eff = 3.046
   class_params = {
       # Photon temperature
       'T_cmb': 2.7255,
       # Neutrino hierarchy
       'N_ur'    : 0,
       'N_ncdm'  : len(set(_mŒΩ)),
       'deg_ncdm': [_mŒΩ.count(mŒΩ) for mŒΩ in sorted(set(_mŒΩ))],
       'm_ncdm'  : [mŒΩ if mŒΩ > 0 else 1e-100 for mŒΩ in sorted(set(_mŒΩ))],
       'T_ncdm'  : [(4/11)**(1/3)*(_N_eff/len(_mŒΩ))**(1/4)]*len(set(_mŒΩ)),
       # Photon precision parameters
       'l_max_g'                          : 1000,
       'l_max_pol_g'                      : 1000,
       'radiation_streaming_approximation': 3,
       # Massive neutrino precision parameters
       'l_max_ncdm'              : 200,
       'Number of momentum bins' : [50]*len(set(_mŒΩ)),
       'Quadrature strategy'     : [2]*len(set(_mŒΩ)),
       'ncdm_fluid_approximation': 3,
       # General precision parameters
       'evolver'                     : 0,
       'recfast_Nz0'                 : 1e+5,
       'tol_thermo_integration'      : 1e-6,
       'perturb_integration_stepsize': 0.25,
       'perturb_sampling_stepsize'   : 0.01,
   }

The key points of this parameter file are:

* Setting ``output_dirs`` to ``param.dir`` ensures that the resulting HDF5
  file with the perturbations will be placed in the same directory as the
  parameter file.
* The amount of cold dark matter :math:`\Omega_{\text{cdm}}` is set through
  ``Œ©cdm = 0.27 - Œ©ŒΩ``, though ``Œ©ŒΩ`` (:math:`\Omega_{\nu}`) is not
  explicitly set. As stated previously, :math:`\Omega_{\nu}` is implicitly
  defined through the other neutrino parameters, from which CO\ *N*\ CEPT
  automatically sets ``Œ©ŒΩ``.
* By specifying ``a_begin = 1/(1 + 99)`` we declare that we are not interested
  in perturbations prior to :math:`z = 99`.
* The neutrino masses ``_mŒΩ`` and effective number of neutrino species
  ``_N_eff`` are both stored in variables starting with an underscore '``_``'.
  This is the canonical naming convention within CO\ *N*\ CEPT parameter files
  for helper variables that are not supposed to be CO\ *N*\ CEPT
  :doc:`parameters </parameters/parameters>`.
* The ``class_params`` :ref:`parameter <class_params>` holds parameters fed to
  CLASS.

  * Note that ``'H0'``, ``'Omega_b'`` and ``'Omega_cdm'`` is
    automatically added from ``H0``, ``Œ©b`` and ``Œ©cdm``.
  * The parameters are set up to take advantage of the case where ``_mŒΩ``
    holds several identical neutrino masses (as in e.g.
    ``_mŒΩ = [0, 3e-2, 3e-2]``). In this case, only neutrinos with unique
    masses (``set(_mŒΩ)``) will be computed (saving computation time), with
    their degeneracy recorded in the ``'deg_ncdm'`` CLASS parameter.
  * We use the ``ncdm`` species for all neutrinos, including the massless one.
    We need to explicitly set the number of massless neutrinos, ``N_ur``, to
    zero, as this is non-zero by default. To avoid possible issues within the
    CLASS computation from having a mass identically equal to zero using
    ``ncdm``, we replace massless entries in ``'m_ncdm'`` with
    :math:`10^{-100}`.
  * In standard CLASS, parameters with multiple values (e.g. ``'m_ncdm'``)
    needs to be specified as a comma-separated string. In CO\ *N*\ CEPT
    parameter files, using lists '``[...]``' is possible as well.
  * The many precision parameters improve the correctness of various
    perturbation results significantly over the default, but also makes the
    CLASS computation much more expensive.

.. tip::
   If you would like to better understand a given CLASS parameter, you can
   look for it in the
   `explanatory.ini <https://github.com/lesgourg/class_public/blob/v2.7.2/explanatory.ini>`_
   example CLASS parameter file, which documents many of the possible CLASS
   parameters.

With the :ref:`above parameter file <class-param>` saved to a file called e.g.
``class-param``, we can run the CO\ *N*\ CEPT class utility on it using
something like

.. code-block:: bash

   ./concept \
       -u class \
           --kmin 1e-3*0.67/Mpc --kmax 1*0.67/Mpc --modes 128 \
           --times 512 \
           "b+cdm:1, g, ncdm[0], ncdm[1], ncdm[2]:2, metric" \
       -p /path/to/class-param \
       -n 4

.. tip::
   If working on a cluster, you can
   :ref:`automatically submit the computation as a job <remote_job_submission>`,
   just as when running full simulations.

The above command requests :math:`128` modes between
:math:`k = 10^{-3}\, h\, \text{Mpc}^{-1}` and
:math:`k = 1\, h\, \text{Mpc}^{-1}`, with
:math:`h = H_0/(100\, \text{km}\, \text{s}^{-1}\, \text{Mpc}^{-1}) = 0.67`,
all tabulated at the same :math:`512` times. Both :math:`\delta` and
:math:`\theta` perturbations of total matter are requested, allowing for
generation of *N*-body initial conditions. Furthermore, :math:`\delta`
perturbations in all linear species --- photons, the three neutrino species
and the metric correction species --- are requested, which might be used to
supply linear gravitational kicks to matter particles within an *N*-body
simulation. Lastly, :math:`\theta`, :math:`\delta P` and :math:`\sigma`
perturbations for the heaviest neutrino species are also requested. The
perturbations will all be in *N*-body :ref:`gauge <gauge>`. Using 4 processes
as in the above example command, the entire computation will take around 6
minutes on modern hardware.

With the ``class_processed.hdf5`` file generated from the above command and
:ref:`parameter file <class-param>`, the below Python script demonstrates how
one can extract and use (some of) the data within this file:

.. code-block:: python3
   :caption: plot.py
   :name: plot-class

   import re
   import numpy as np
   import matplotlib.pyplot as plt
   import scipy.interpolate
   import h5py

   # Read in data from the HDF5 file
   with h5py.File('class_processed.hdf5', mode='r') as f:
       # Read in all background energy densities
       background = f['background']
       print('Available background quantities:', list(background.keys()))
       a_bg = background['a'][:]
       œÅ_bg = {}
       for key, val in background.items():
           match = re.search(r'^rho_(.+)$', key)
           if match:
               œÅ_bg[match.group(1)] = val[:]
       h = background.attrs['h']
       # Read in all Œ¥ perturbations
       perturbations = f['perturbations']
       print('Available perturbations:', list(perturbations.keys()))
       a_pt = perturbations['a'][:]
       k_pt = perturbations['k'][:]
       Œ¥_pt = {}
       for key, val in perturbations.items():
           match = re.search(r'^delta_(.+)$', key)
           if match:
               Œ¥_pt[match.group(1)] = val[...]
       gauge = perturbations.attrs['gauge']
       # Get unit system
       units = dict(f['units'].attrs)
       print('Units:', units)

   # Construct matter power spectrum spline
   A_s = 2.1e-9
   n_s = 0.96
   Œ±_s = 0
   k_pivot = 0.05  # [Mpc‚Åª¬π]
   Œ∂ = lambda k: (
       np.pi*np.sqrt(2*A_s)
       *k**(-3/2)*(k/k_pivot)**((n_s - 1)/2)
       *np.exp(Œ±_s/4*np.log(k/k_pivot)**2)
   )
   spline = scipy.interpolate.interp2d(
       np.log(k_pt),
       np.log(a_pt),
       np.log((Œ∂(k_pt)*Œ¥_pt['b+cdm'])**2),
       kind='cubic',
   )
   P_m = lambda z, logk=np.log(k_pt), spline=spline: (
       np.exp(spline(logk, np.log(1/(1 + z))))
   )

   # Construct Œ¥œÅ splines for all species
   Œ¥œÅ = {}
   for species, Œ¥_species in Œ¥_pt.items():
       œÅ_species = np.exp(scipy.interpolate.interp1d(
           np.log(a_bg),
           np.log(œÅ_bg[species]),
           kind='cubic',
       )(np.log(a_pt)))
       spline = scipy.interpolate.interp2d(
           np.log(k_pt),
           np.log(a_pt),
           Œ¥_species*œÅ_species.reshape(-1, 1),
           kind='linear',
       )
       Œ¥œÅ[species] = lambda z, logk=np.log(k_pt), spline=spline: (
           spline(logk, np.log(1/(1 + z)))
       )

   # Plot energy density history
   fig, axes = plt.subplots(2, 2, figsize=(9, 6.75))
   ax = axes[0, 0]
   a_min = 1e-3
   mask = (a_bg >= a_min)
   for species, œÅ in œÅ_bg.items():
       match = re.search(r'^(b|cdm|g|ncdm\[\d+\]|lambda)$', species)
       if match:
           ax.loglog(a_bg[mask], œÅ[mask]/œÅ_bg['crit'][mask], label=species)
   ax.set_xlim(a_min, 1)
   ax.set_ylim(bottom=1e-5)
   ax.legend(fontsize=8)
   ax.set_xlabel(r'$a$')
   ax.set_ylabel(r'$\bar{{\rho}}_{\alpha}/\rho_{\mathrm{crit}}$')
   ax.set_title(f'Energy density history')

   # Plot matter power spectrum
   ax = axes[0, 1]
   z_values = [0, 0.5, 1, 2, 5, 10]
   for z in z_values:
       ax.loglog(k_pt/h, P_m(z), label=rf'$z = {z}$')
   ax.set_xlim(k_pt[0]/h, k_pt[-1]/h)
   ax.legend(fontsize=8)
   unit_length = units['unit length']
   ax.set_xlabel(rf'$k\, \left[h\, \mathrm{{{unit_length}}}^{{-1}}\right]$')
   ax.set_ylabel(
       rf'$P_{{\mathrm{{b}}+\mathrm{{cdm}}}}\, '
       rf'\left[(h^{{-1}}\, \mathrm{{{unit_length}}})^3\right]$'
   )
   ax.yaxis.tick_right()
   ax.yaxis.set_label_position('right')
   ax.set_title(f'Matter power spectrum ({gauge} gauge)')

   # Plot Œ¥œÅ perturbations of all species
   z_values = [50, 1]
   unit_mass = (
       units['unit mass']
       .replace(r'**(10)', r'^{10}')
       .replace(r'*m_sun', r'\, m_{\odot}')
   )
   for ax, z in zip(axes[1, :], z_values):
       for i, (species, Œ¥œÅ_species) in enumerate(Œ¥œÅ.items()):
           for sign, linestyle, label in zip([-1, +1], ['-', ':'], [species, None]):
               ax.loglog(k_pt/h, sign*Œ¥œÅ_species(z), f'C{i}{linestyle}',
                   zorder=(-np.inf if species == 'metric' else None), label=label)
       ax.set_xlim(k_pt[0]/h, k_pt[-1]/h)
       ax.set_ylim(bottom=min(
           np.min(-Œ¥œÅ['g'      ](z)),
           np.min(-Œ¥œÅ['ncdm[0]'](z)),
       ))
       ax.set_xlabel(rf'$k\, \left[h\, \mathrm{{{unit_length}}}^{{-1}}\right]$')
       ax.set_ylabel(
           rf'$-\delta\rho_{{\alpha}}\, '
           rf'\left[{unit_mass}\, \mathrm{{{unit_length}}}^{{-3}}\right]$'
       )
       ax.set_title(rf'$\delta\rho$ perturbations ({gauge} gauge)')
       ax.text(0.8, 0.73, rf'$z = {z}$', transform=ax.transAxes)
   axes[1, 0].legend(fontsize=8)
   axes[1, 1].yaxis.tick_right()
   axes[1, 1].yaxis.set_label_position('right')

   # Save figure
   plt.tight_layout()
   fig.savefig('plot.png', dpi=150)


To run the :ref:`above script <plot-class>`, save it to a file --- e.g.
``plot.py`` --- within the same directory as ``class_processed.hdf5``, then
execute it with

.. code-block:: bash

   python3 plot.py

where ``python3`` is your Python executable.

.. tip::
   The :ref:`plotting script <plot-class>` requires the Python packages
   `NumPy <https://www.numpy.org/>`_, `SciPy <https://www.scipy.org/>`_,
   `Matplotlib <https://matplotlib.org/>`_ and
   `H5Py <https://www.h5py.org/>`_, all of which are installed with the
   Python distribution that comes with CO\ *N*\ CEPT. If you have
   CO\ *N*\ CEPT installed (i.e. are not
   :ref:`running through Docker <running_through_docker>`), you may then use

   .. code-block:: bash

      source /path/to/concept-installation/concept
      $python plot.py

The result of running :ref:`the script <plot-class>` is an image file
``plot.png`` with :math:`2\times 2` panels, showing

* Top left: The evolution history of the background densities
  :math:`\bar{\rho}_{\alpha}(a)` for the different species :math:`\alpha`,
  relative to the critical density :math:`\rho_{\text{crit}}(a)`.
* Top right: The matter power spectrum :math:`P_{\text{b}+\text{cdm}}(k)` at
  different redshifts :math:`z`. This is constructed as

  .. math::
     P_{\text{b}+\text{cdm}}(z, k) = \zeta^2(k) \delta^2_{\text{b}+\text{cdm}}(z, k)\,,

  with :math:`\delta_{\text{b}+\text{cdm}}(z, k)` obtained from
  ``class_processed.hdf5`` and :math:`\zeta(k)` being the primordial curvature
  perturbation, parametrised by the primordial parameters
  :math:`A_{\text{s}}`, :math:`n_{\text{s}}`, :math:`\alpha_{\text{s}}` and
  :math:`k_{\text{pivot}}` as describe :ref:`here <primordial_spectrum>`.
  :ref:`The script <plot-class>` assigns some values to these parameters.
  Importantly, these values are independent of the CLASS computation of the
  :math:`\delta` perturbations.

* Lower panels: The :math:`\delta\rho_{\alpha}(k)` perturbations for the
  different species :math:`\alpha` at two redshifts (early and late). The
  fictitious :math:`\delta\rho_{\text{metric}}` perturbation --- supplying
  general relativistic corrections --- generally oscillates wildly, having
  both positive and negative values. Dotted lines depict negative values that
  have been flipped.

  .. note::
     In CLASS, the sign convention is such that e.g.
     :math:`\delta_{\text{cdm}}` is in fact purely negative. What is plotted
     is thus :math:`-\delta_{\alpha}`.



.. _running_through_docker:

Running through Docker
......................
As described under :ref:`Supported platforms<supported_platforms>`, it is
possible to run CO\ *N*\ CEPT through Docker. While not preferable for running
large simulations, running CO\ *N*\ CEPT this way for casual use of the class
utility is very much encouraged.

Given a parameter file named ``class-param`` (e.g.
:ref:`the one above <class-param>`), you may run the CO\ *N*\ CEPT class
utility through Docker by executing something like

.. code-block:: bash

   docker run \
       --rm \
       -v "${PWD}:/mnt" \
       jmddk/concept \
           concept \
               -u class \
                   --kmin 1e-3/Mpc --kmax 0.1/Mpc --modes 128 \
                   --times 512 \
                   "b+cdm:1, g" \
               -p /mnt/class-param \
               -n 4

from within the directory of ``class-param``. Given that
``output_dirs = param.dir`` is specified within ``class-param``, the resulting
HDF5 file will be placed in your current directory.

.. note::
   If running Windows, the above command is valid within
   `PowerShell <https://docs.microsoft.com/powershell/>`_, not
   `CMD <https://docs.microsoft.com/windows-server/administration/windows-commands/windows-commands>`_

You can even get rid of the parameter file --- running the CO\ *N*\ CEPT class
utility using a stand-alone one-liner --- by supplying the necessary
parameters via the ``-c``
:ref:`command-line option <command_line_parameters>`.



Tips and tricks
...............
Below we list a few tips and tricks that are not discussed above.



|bgn-h3| Plotting perturbations on the fly |end-h3|

It can be difficult to judge whether the various CLASS precision parameters
are cranked up high enough to ensure reasonable convergence of the different
perturbations. To help with this assessment, it can be useful to see the
perturbations plotted, with jagged lines indicating lack of convergence.

By setting the ``class_plot_perturbations``
:ref:`parameter <class_plot_perturbations>` to ``True``, CO\ *N*\ CEPT will
plot all perturbations entering into the computation of the data in the final
``class_processed.hdf5`` file. E.g.

.. code-block:: bash
   :emphasize-lines: 5

   ./concept \
       -u class \
           --kmin <kmin> --kmax <kmax> \
           <perturbations> \
       -c "class_plot_perturbations = True"

This will create a ``class_perturbations`` and a
``class_perturbations_processed`` directory, containing plots of the various
perturbations. For details on their content, see the
``class_plot_perturbations`` :ref:`parameter <class_plot_perturbations>`.

The plots within ``class_plot_perturbations`` show detrended perturbations,
allowing for a detailed view. In these plots, wildly oscillating behaviour is
often seen, which may or may not be physical. Non-smooth, jagged behaviour is
typically a sign of a lack of convergence, though note that this may not be an
issue, since often, most of the information is contained just within the
trend-line. To check whether a convergence problem clearly manifest in the
full (non-detrended) perturbations, check the plots inside the
``class_perturbations_processed`` directory.



|bgn-h3| Replacing bad CLASS perturbations |end-h3|

Obtaining converged CLASS perturbations for all :math:`k` of interest may
require extremely high precision :ref:`CLASS settings <class_params>`, which
in turn increases the time and memory requirements for the CLASS computation.
Often, converged perturbations in all species are only needed at large scales,
as the small scales are completely dominated by matter. Allowing some
non-convergence in the other species at high :math:`k` is thus often
acceptable, with the benefit that lower CLASS precision settings can be used.

However, pathological behaviour in any perturbation may cause trouble (such
can be detected using the ``class_plot_perturbations``
:ref:`parameter <class_plot_perturbations>` as described above). If a
perturbation is thought to be ill-behaved beyond some :math:`k`, CO\ *N*\ CEPT
can be told to replace perturbation values at larger :math:`k` with new values
obtained via extrapolation from the perturbation values at lower :math:`k`,
using the ``class_k_max`` :ref:`parameter <class_k_max>`. To e.g. only use the
actual CLASS data for :math:`\partial_{\tau} H_{\text{T}}` (the conformal time
derivative of the trace-free component of the spatial *N*-body gauge metric)
up until :math:`k = 10\, h\, \text{Mpc}^{-1}`, with data beyond this :math:`k`
constructed through extrapolation of lower :math:`k` data:

.. code-block:: bash
   :emphasize-lines: 5

   ./concept \
       -u class \
           --kmin <kmin> --kmax <kmax> \
           <perturbations> \
       -c "class_k_max = {'H_T_prime': 10*h/Mpc}"



|bgn-h3| Ignoring or cleaning the CLASS cache |end-h3|

CO\ *N*\ CEPT automatically cashes CLASS computations to disk. When running
the CO\ *N*\ CEPT class utility several times over with the same input, the
first CLASS computation will then be reused, saving computation time.

This behaviour is not always what you want, e.g. if changes to the CLASS
source code has been introduced after a disk caching. To request a rerun of
CLASS regardless of whether a matching cache is found on disk, set the
``class_reuse`` :ref:`parameter <class_reuse>` to ``False``, e.g.

.. code-block:: bash
   :emphasize-lines: 5

   ./concept \
       -u class \
           --kmin <kmin> --kmax <kmax> \
           <perturbations> \
       -c "class_reuse = False"

Even with ``class_reuse = False``, new CLASS computations will be cached to
disk. If the disk cache already exists, this will *not* be overwritten.

To clear the reusable CLASS cache completely, you may run

.. code-block:: bash

   (source concept && make clean-class-reusable)

