# Input/output
initial_conditions = f'{param.dir}/{_subtest}/ic_{_ncomponents}.hdf5'
output_dirs = {
    'snapshot': (
        f'{param.dir}/{_subtest}/output_{_ncomponents}components_{nprocs}procs'
            + (f'_subtiling{_subtiling}' if _subtest == 'tile' else '')
    ),
    'render2D': ...,
}
output_bases = {
    'snapshot': 'snapshot',
    'render2D': 'render2D',
}
_T = 1*Gyr  # Collision time for spherical collapse
output_times = {
    'snapshot': sqrt(linspace(t_begin**2, (t_begin + _T)**2, 5)),
    'render2D': ...,
}
_key = tuple([f'component{n}' for n in range(_ncomponents)])
render2D_select = {
    _key: {'data': False, 'image': True, 'terminal image': False},
}

# Numerical parameters
boxsize = 100*Mpc
if _subtest == 'tile':
    _scale = 1.25
    _range = 4.8*(1 - 1e-2)
    shortrange_params = {
        'gravity': {
            'scale'    : f'{_scale}*boxsize/gridsize',
            'range'    : f'{_range}*scale',
            'subtiling': _subtiling,
        },
    }
    _tiles_lin = 6  # The global tiling will have a shape of _tiles_lin×_tiles_lin×_tiles_lin
    potential_options = {
        'gridsize': {
            'gravity': {
                'p3m': ceil(_tiles_lin*_range*_scale),
            },
        },
    }

# Cosmology
t_begin = 2*Gyr  # Value is irrelevant

# Physics
if _subtest == 'domain':
    select_forces = {
        'particles': {'gravity': 'pp (non-periodic)'},
    }
elif _subtest == 'tile':
    select_forces = {
        'particles': {'gravity': 'p3m'},
    }

select_softening_length = {
    'particles': 0.01*boxsize,
}

# Simulation options
N_rungs = 10

# Graphics
_gridsize = 420
render2D_options = {
    'upstream gridsize': {
        'all': _gridsize,
    },
    'global gridsize': {
        _key: _gridsize,
    },
    'interpolation': {
        _key: 'CIC',
    },
    'axis': {
        _key: 'z',
    },
    'extent': {
        _key: boxsize,
    },
    'enhance': {
        _key: False,
    },
}

# Debugging options
print_load_imbalance = False
enable_Hubble = False

