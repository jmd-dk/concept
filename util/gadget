#!/usr/bin/env bash

# This file is part of COùòïCEPT, the cosmological ùòï-body code in Python.
# Copyright ¬© 2015‚Äì2021 Jeppe Mosgaard Dakin.
#
# COùòïCEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# COùòïCEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with COùòïCEPT. If not, see https://www.gnu.org/licenses/
#
# The author of COùòïCEPT can be contacted at dakin(at)phys.au.dk
# The latest version of COùòïCEPT is available at
# https://github.com/jmd-dk/concept/



# This utility generates a GADGET-2 Makefile, parameter file
# and outputlist file, given an equivalent COùòïCEPT parameter file.
# When run without specifying a COùòïCEPT parameter file, this utility
# generates a GADGET-2 Makefile only. If in addition a COùòïCEPT parameter file
# is supplied (-p path/to/parameterfile), a matching GADGET-2 parameter file
# and outputlist file will also be generated.



# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Source the concept script
source "${this_dir}/../concept"

# Set up error trapping
ctrl_c() {
    trap : 0
    exit 2
}
abort() {
    exit_code=$?
    colorprint "An error occurred while using the \"$(basename "${this_file}")\" utility!" "red"
    exit ${exit_code}
}
if [ "${called_from_concept}" == "True" ]; then
    trap 'ctrl_c' SIGINT
    trap 'abort' EXIT
    set -e
fi

# Use Python's argparse module to handle command-line arguments
dump_directory_unspecified="__none__"
argparse_finished="False"
argparse_exit_code=""
args=$("${python}" -B -c "
import argparse, sys
# Setup command-line arguments
parser = argparse.ArgumentParser(
    prog='$(basename "${this_file}")',
    description='Run the ${esc_concept} $(basename "${this_file}") utility',
)
parser.add_argument(
    'dump_directory',
    nargs='?',
    default='${dump_directory_unspecified}',
    help='path to directory in which to dump generated GADGET-2 files',
)
# Enables Python to write directly to screen (stderr)
# in case of help request.
stdout = sys.stdout
sys.stdout = sys.stderr
# Now do the actual argument parsing,
# including writing out the help message.
if '${called_from_concept}' == 'True':
    # Called from concept - Throw exception on illegal args
    args = parser.parse_args()
else:
    # Called directly - Allow what appears to be illegal args
    # (these might be known to the concept script).
    args, unknown_args = parser.parse_known_args()
# Reset stdout
sys.stdout = stdout
# Print out the arguments.
# These will be captured in the Bash 'args' variable.
print('argparse_finished=True')
print(f'dump_directory={args.dump_directory}')
" "$@" || echo "argparse_exit_code=$?")
# Evaluate the handled arguments into this scope
eval "${args}"
# Exit if argparse exited without finishing
if [ "${argparse_finished}" != "True" ]; then
    if [ -z "${argparse_exit_code}" ]; then
        argparse_exit_code=0
    fi
    if [ ${argparse_exit_code} -eq 0 ]; then
        trap : 0
    fi
    exit ${argparse_exit_code}
fi

# If not called indirectly through the concept script,
# call the concept script now.
if [ "${called_from_concept}" != "True" ]; then
    "${concept}" -u="${this_file}" "$@"
    trap : 0
    exit 0
fi

# Is a parameter file supplied?
param_supplied="False"
if [ "${param}" != "${param_default}" ]; then
    param_supplied="True"
fi

# If no parameter file is supplied,
# generate a default one.
PMGRID_fake=2    # used by this utility
PMGRID_unset=-1  # set by COùòïCEPT
param_tmp=""
if [ "${param_supplied}" == "False" ]; then
    param_tmp="${tmp_dir}/param/${start_time_human_nosep}/$(basename "${this_file}")/default"
    param="${param_tmp}"
    mkdir -p "$(dirname "${param}")"
    echo "
##############################
# Utility default parameters #
##############################
# Numerical parameters
potential_options = {
    'gridsize': {
        'global': {
            'gravity': {
                'p3m': ${PMGRID_fake},  # will not be used in the end
            },
        },
    },
}
shortrange_params = {
    'gravity': {
        'scale': '1.25*boxsize/gridsize',
        'range': '4.5*scale',
    },
}
" > "${param}"
fi

# Convert supplied path to absolute path
if [ "${dump_directory}" != "${dump_directory_unspecified}" ]; then
    dump_directory="$(absolute_path "${dump_directory}")"
    occupied="False"
    mkdir -p "${dump_directory}" 2>/dev/null || occupied="True"
    if [ "${occupied}" == "True" ]; then
        colorprint "Error: Cannot create directory \"${dump_directory}\" for storing output" "red"
        exit 1
    fi
fi

# The absolute path to the output GADGET-2 Makefile and parameter file
if [ "${param_supplied}" == "False" ]; then
    # When no COùòïCEPT parameter file is given,
    # we only generate a GADGET-2 Makefile.
    if [ "${dump_directory}" == "${dump_directory_unspecified}" ]; then
        dump_directory="${gadget_dir}/Gadget2"
        gadget_makefile="${dump_directory}/Makefile_concept"
    else
        gadget_makefile="${dump_directory}/Makefile"
    fi
else
    if [ "${dump_directory}" == "${dump_directory_unspecified}" ]; then
        dump_directory="${param}_gadget"
    fi
    gadget_makefile="${dump_directory}/Makefile"
    gadget_param="${dump_directory}/param"
    # Further paths needed for the GADGET-2 parameter file
    gadget_outputlist="${dump_directory}/outputlist"
    gadget_output="${dump_directory}/output"
    mkdir -p "${gadget_output}" >/dev/null 2>&1 || :
fi



##############################
# Generate GADGET-2 Makefile #
##############################
# GADGET-2 Makefile header
header_lines=("# This GADGET-2 Makefile was generated by the CONCEPT gadget utility")
if [ "${param_supplied}" == "True" ]; then
    header_lines=("${header_lines[@]}" "# from the CONCEPT parameter file \"${param}\"")
fi
header_lines=("${header_lines[@]}" "# at ${start_time_human_sec}.")
header=""
for line in "${header_lines[@]}"; do
    header="${header}${line}\n"
done

# If a COùòïCEPT parameter file is supplied,
# get the grid size of the global P(¬≥)M grid used, if any.
parameters="$(   \
    "${concept}" \
        -m "
from commons import *
PMGRID = max(list(potential_options['gridsize']['global']['gravity'].values()))
print('PMGRID =', PMGRID)
ASMTH = correct_float(shortrange_params['gravity']['scale']/(boxsize/PMGRID))
print('ASMTH =', ASMTH)
RCUT = correct_float(shortrange_params['gravity']['range']/shortrange_params['gravity']['scale'])
print('RCUT =', RCUT)
"                                   \
        -c="${command_line_params}" \
        -p="${param}"               \
        -n 1                        \
        --pure-python               \
        --local                     \
)"
get_gadget_param() {
    varname="$1"
    echo "${parameters}" | grep "^${varname} = " | tail -n 1 | awk '{print $3}'
}
disable_pm="#"
PMGRID=$(get_gadget_param PMGRID)
ASMTH=$(get_gadget_param ASMTH)
RCUT=$(get_gadget_param RCUT)
if [ ${PMGRID} -eq ${PMGRID_fake} ] || [ ${PMGRID} -eq ${PMGRID_unset} ]; then
    PMGRID=128  # assign default value
else
    disable_pm=""
fi

# Write out GADGET-2 Makefile
make_vars="$(cd "${src_dir}" && make -s print-vars)"
get_make_var() {
    varname="$1"
    definition="$(echo "${make_vars}" | grep "^${varname} = ")"
    for dots in "." ".."; do
        directory="${src_dir}"
        if [ ${dots} == ".." ]; then
            directory="$(dirname ${directory})"
        fi
        replacements=(                     \
            "-I${dots}/" "-I${directory}/" \
            "-L${dots}/" "-L${directory}/" \
            " ${dots}/"  " ${directory}/"  \
            "=${dots}/"  "=${directory}/"  \
        )
        for ((pattern_index=0; pattern_index<${#replacements[@]}; pattern_index+=2)); do
            ((replace_index = pattern_index + 1))
            pattern="${replacements[${pattern_index}]}"
            pattern="${pattern//\./\\.}"
            pattern="${pattern//\//\\/}"
            replace="${replacements[${replace_index}]}"
            replace="${replace//\./\\.}"
            replace="${replace//\//\\/}"
            definition="$(echo "${definition}" | sed "s/${pattern}/${replace}/g")"
        done
    done
    definition="$(echo "${definition#* = }")"
    definition="$("${python}" -B -c "print('${definition}'.strip())")"
    echo "${definition}"
}
echo "$(printf "${header}")



#####################
# Optional settings #
#####################
# Basic operation mode of code
OPT += -DPERIODIC

# Things that are always recommended
OPT += -DPEANOHILBERT
OPT += -DWALLCLOCK

# TreePM options
${disable_pm}OPT += -DPMGRID=${PMGRID}
${disable_pm}OPT += -DASMTH=${ASMTH}
${disable_pm}OPT += -DRCUT=${RCUT}

# Time integration options
OPT += -DSYNCHRONIZATION

# Single/Double Precision
OPT += -DDOUBLEPRECISION

# Things for special behaviour
OPT += -DNOTYPEPREFIX_FFTW



########################################
# Settings for compilation and linking #
########################################
# Includes
fftw_incl = -I${fftw_for_gadget_dir}/include
gsl_incl = $(get_make_var gsl_incl)
mpi_incl = $(get_make_var mpi_incl)
includes = \$(fftw_incl) \$(gsl_incl) \$(mpi_incl)

# Compiler options
CC = $(get_make_var CC)
other_cflags = $(get_make_var other_cflags)
optimizations = $(get_make_var optimizations)
CFLAGS += \$(OPT) \$(other_cflags) \$(optimizations) \$(includes)

# Libraries to link
fftw_libs = -L${fftw_for_gadget_dir}/lib -Wl,-rpath=${fftw_for_gadget_dir}/lib \\
    -lrfftw_mpi -lfftw_mpi -lrfftw -lfftw
gsl_libs = $(get_make_var gsl_libs)
mpi_libs = $(get_make_var mpi_libs)
LDLIBS += \$(fftw_libs) \$(gsl_libs) \$(mpi_libs)

# Linker options
comma = ,
optimizations_linker = $(get_make_var optimizations_linker)
LDFLAGS += \$(filter-out -ffast-math,\$(optimizations)) \\
    \$(addprefix -Wl\$(comma),\$(optimizations_linker))



##############################
# Specification of filenames #
##############################
executable = Gadget2
sources =               \\
    accel               \\
    allocate            \\
    allvars             \\
    begrun              \\
    density             \\
    domain              \\
    driftfac            \\
    endrun              \\
    forcetree           \\
    global              \\
    gravtree            \\
    gravtree_forcetest  \\
    hydra               \\
    init                \\
    io                  \\
    longrange           \\
    main                \\
    ngb                 \\
    peano               \\
    pm_nonperiodic      \\
    pm_periodic         \\
    potential           \\
    predict             \\
    read_ic             \\
    restart             \\
    run                 \\
    system              \\
    timestep            \\

headers =   \\
    allvars \\
    proto   \\
    tags    \\



###########
# Targets #
###########
# Link object files into executable
\$(executable): \$(addsuffix .o, \$(sources))
	\$(CC) \$? -o \$@ \$(LDFLAGS) \$(LDLIBS)

# Compile C source files into object files
\$(addsuffix .o, \$(sources)): %.o: %.c
	\$(CC) \$(CFLAGS) -c -o \$@ \$<
\$(addsuffix .o, \$(sources)): \$(addsuffix .h, \$(headers)) \$(MAKEFILE_LIST)

# Cleanup target
clean:
	rm -f \$(addsuffix .o, \$(sources)) \$(executable)
" > "${gadget_makefile}"



####################################
# Generate GADGET-2 parameter file #
####################################
# A GADGET-2 parameter file is only generated
# if a corresponding COùòïCEPT parameter file is given.
if [ "${param_supplied}" == "True" ]; then
    # GADGET-2 parameter file header
    header_lines=(                                                                    \
        "%% This GADGET-2 parameter file was generated by the CONCEPT gadget utility" \
        "%% from the CONCEPT parameter file \"${param}\""                             \
        "%% at ${start_time_human_sec}."                                              \
    )
    header=""
    for line in "${header_lines[@]}"; do
        header="${header}${line}\n"
    done
    # Get initial condition file
    ic_unspecified="__none__"
    gadget_ic="$(           \
        cd "${concept_dir}" \
        && "${concept}"     \
            -m "
from commons import *
if isinstance(initial_conditions, str) and initial_conditions:
    if os.path.isfile(initial_conditions):
        filename = initial_conditions
    elif os.path.isdir(initial_conditions):
        filenames = glob(f'{initial_conditions}/*.0')
        if len(filenames) == 1:
            filename = filenames[0]
        else:
            # Failed to locate multi-file GADGET snapshot
            filename = initial_conditions
    else:
        filename = initial_conditions.rstrip('.*') + '.0'
        if not os.path.isfile(filename):
            # Failed to locate multi-file GADGET snapshot
            filename = initial_conditions
    if os.path.isfile(filename) and filename.endswith('.0'):
        filename = filename.removesuffix('.0')
    print(os.path.abspath(filename))
else:
    print('${ic_unspecified}')
"                                       \
            -c="${command_line_params}" \
            -p="${param}"               \
            -n 1                        \
            --pure-python               \
            --local                     \
        | tail -n 1                     \
)"
    # Extract information from snapshot
    if [ "${gadget_ic}" == "${ic_unspecified}" ]; then
        gadget_ic="<path to initial condition file>"
        ((N_all = 128**3))
        ICFormat=2
    else
        gadget_ic_info="$("${concept}" -u info "${gadget_ic}" --pure-python --local)"
        N_all="$(echo "${gadget_ic_info}" | grep " N " | awk '{print $2}')"
        ICFormat="$(echo "${gadget_ic_info}" | grep "SnapFormat " \
            | awk '{print $NF}' | head -n 1)"
    fi
    N_all="$("${python}" -c "print([int(N) for N in '''${N_all}'''.split()])")"
    N_tot="$("${python}" -c "print(sum(${N_all}))")"
    N_min="$("${python}" -c "print(min(${N_all}))")"
    # Extract various parameters and dump outputlist
    parameters="$( \
        "${concept}" \
            -m "
from commons import *
from snapshot import GadgetSnapshot
from species import Component
# Get and dump outputlist
outputlist = [
    correct_float(a)
    for a in sorted(itertools.chain(*output_times['a'].values()))
]
if not outputlist:
    # Default to one output at a = 1
    outputlist.append(1)
TimeMax = outputlist.pop()
np.savetxt(
    '${gadget_outputlist}',
    outputlist,
    fmt='%.15e',
)
# The snapshot format to use for output
print('SnapFormat =', gadget_snapshot_params['snapformat'])
# Instantiate snapshot with components,
# used to extract values further down.
snapshot = GadgetSnapshot()
snapshot.populate([
    Component(name, 'matter', N=N)
    for name, N in zip(snapshot.component_names, ${N_all})
])
# Various parameters
print('TimeBegin =', correct_float(a_begin))
print('TimeMax =', TimeMax)
print('Omega0 =', correct_float(Œ©b + Œ©cdm))
print('OmegaLambda =', correct_float(1 - (Œ©b + Œ©cdm)))
print('OmegaBaryon =', correct_float(Œ©b))
print('HubbleParam =', correct_float(snapshot.h))
print('BoxSize =', correct_float(boxsize/snapshot.unit_length))
print('UnitLength_in_cm =', correct_float((snapshot.unit_length*snapshot.h)/units.cm))
print('UnitMass_in_g =', correct_float((snapshot.unit_mass*snapshot.h)/units.g))
print('UnitVelocity_in_cm_per_s =', correct_float(snapshot.unit_velocity/(units.cm/units.s)))
# Use the largest available softening length
print('Softening =',
    np.max([
        correct_float(eval_unit(str(softening_length).replace('N', '${N_min}'))/snapshot.unit_length)
        for softening_length in select_softening_length.values()
    ])
)
# A large TreeAllocFactor is needed for simulations with few particles
Limit = collections.namedtuple('Limit', ('log2N', 'value'))
lower = Limit(10, 200.0)
upper = Limit(20,   0.8)
log2N = log2(${N_tot})
if log2N < lower.log2N:
    TreeAllocFactor = lower.value
elif log2N > upper.log2N:
    TreeAllocFactor = upper.value
else:
    a = (upper.value - lower.value)/(upper.log2N - lower.log2N)
    b = lower.value - a*lower.log2N
    TreeAllocFactor = a*log2N + b
print(f'TreeAllocFactor = {TreeAllocFactor:.1f}')
# Determine appropriate number of files per output snapshot
print('NumFilesPerSnapshot =', snapshot.get_num_files())
"                                       \
            -c="${command_line_params}" \
            -p="${param}"               \
            -n 1                        \
            --pure-python               \
            --local                     \
)"
    # Write out GADGET-2 parameter file
    echo "$(printf "${header}")



% Relevant files
InitCondFile       ${gadget_ic}
OutputDir          ${gadget_output}
EnergyFile         energy.txt
InfoFile           info.txt
TimingsFile        timings.txt
CpuFile            cpu.txt
RestartFile        restart
SnapshotFileBase   snapshot
OutputListFilename ${gadget_outputlist}

% CPU time-limit
TimeLimitCPU    999999999
ResubmitOn      0
ResubmitCommand scriptfile

% Code options
ICFormat                ${ICFormat}
SnapFormat              $(get_gadget_param SnapFormat)
ComovingIntegrationOn   1
TypeOfTimestepCriterion 0
OutputListOn            1
PeriodicBoundariesOn    1

% Caracteristics of run
TimeBegin   $(get_gadget_param TimeBegin)
TimeMax     $(get_gadget_param TimeMax)
Omega0      $(get_gadget_param Omega0)
OmegaLambda $(get_gadget_param OmegaLambda)
OmegaBaryon $(get_gadget_param OmegaBaryon)
HubbleParam $(get_gadget_param HubbleParam)
BoxSize     $(get_gadget_param BoxSize)  % kpc/h

% Output frequency
TimeBetSnapshot           0
TimeOfFirstSnapshot       0
CpuTimeBetRestartFile     999999999
TimeBetStatistics         999999999
NumFilesPerSnapshot       $(get_gadget_param NumFilesPerSnapshot)  % based on N = ${N_tot}
NumFilesWrittenInParallel 1

% Accuracy of time integration
ErrTolIntAccuracy      0.025
MaxRMSDisplacementFac  0.2
CourantFac             0.15
MaxSizeTimestep        0.03
MinSizeTimestep        0.0

% Tree algorithm, force accuracy, domain update frequency
ErrTolTheta               0.5
TypeOfOpeningCriterion    1
ErrTolForceAcc            0.005
TreeDomainUpdateFrequency 0.1

% Further parameters of SPH
DesNumNgb          33
MaxNumNgbDeviation 2
ArtBulkViscConst   0.8
InitGasTemp        0.0
MinGasTemp         0.0

% Memory allocation
PartAllocFactor 1.6
TreeAllocFactor $(get_gadget_param TreeAllocFactor)  % based on N = ${N_tot}
BufferSize      100

% System of units
UnitLength_in_cm         $(get_gadget_param UnitLength_in_cm)  % kpc/cm
UnitMass_in_g            $(get_gadget_param UnitMass_in_g)  % (1e+10*m_sun)/g
UnitVelocity_in_cm_per_s $(get_gadget_param UnitVelocity_in_cm_per_s)  % (km/s)/(cm/s)
GravityConstantInternal  0

% Softening lengths
MinGasHsmlFractional  0.0
SofteningGas          $(get_gadget_param Softening)  % kpc/h
SofteningHalo         $(get_gadget_param Softening)  % kpc/h
SofteningDisk         $(get_gadget_param Softening)  % kpc/h
SofteningBulge        $(get_gadget_param Softening)  % kpc/h
SofteningStars        $(get_gadget_param Softening)  % kpc/h
SofteningBndry        $(get_gadget_param Softening)  % kpc/h
SofteningGasMaxPhys   $(get_gadget_param Softening)  % kpc/h
SofteningHaloMaxPhys  $(get_gadget_param Softening)  % kpc/h
SofteningDiskMaxPhys  $(get_gadget_param Softening)  % kpc/h
SofteningBulgeMaxPhys $(get_gadget_param Softening)  % kpc/h
SofteningStarsMaxPhys $(get_gadget_param Softening)  % kpc/h
SofteningBndryMaxPhys $(get_gadget_param Softening)  % kpc/h
" > "${gadget_param}"
fi

# Cleanup
rm -f "${param_tmp}"
cleanup_empty_tmp

# Exit gracefully
if [ "${param_supplied}" == "False" ]; then
    echo "GADGET-2 Makefile dumped as \"$(sensible_path ${gadget_makefile})\""
else
    echo "GADGET-2 Makefile, parameter file and outputlist \
dumped in \"$(sensible_path ${dump_directory})\""
fi
colorprint "$(basename "${this_file}") utility finished successfully" "green"
trap : 0

