#!/usr/bin/env bash

# This file is part of COùòïCEPT, the cosmological ùòï-body code in Python.
# Copyright ¬© 2015‚Äì2021 Jeppe Mosgaard Dakin.
#
# COùòïCEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# COùòïCEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with COùòïCEPT. If not, see https://www.gnu.org/licenses/
#
# The author of COùòïCEPT can be contacted at dakin(at)phys.au.dk
# The latest version of COùòïCEPT is available at
# https://github.com/jmd-dk/concept/



# This utility can convert between different types of snapshots,
# and even make changes to the global parameters and component attributes.



# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Source the concept script
source "${this_dir}/../concept"

# Set up error trapping
ctrl_c() {
    trap : 0
    exit 2
}
abort() {
    exit_code=$?
    colorprint "An error occurred while using the \"$(basename "${this_file}")\" utility!" "red"
    exit ${exit_code}
}
if [ "${called_from_concept}" == "True" ]; then
    trap 'ctrl_c' SIGINT
    trap 'abort' EXIT
    set -e
fi

# Use Python's argparse module to handle command-line arguments
argparse_finished="False"
argparse_exit_code=""
args=$("${python}" -B -c "
import argparse, sys
# Setup command-line arguments
parser = argparse.ArgumentParser(
    prog='$(basename "${this_file}")',
    description='Run the ${esc_concept} $(basename "${this_file}") utility',
)
parser.add_argument(
    'paths',
    nargs='+',
    help='path to snapshot or directory of snapshots',
)
parser.add_argument(
    'attributes',
    nargs='*',
    help='space-separated list of global parameters and component attributes',
)
parser.add_argument(
    '-y', '--yes-to-defaults',
    default=False,
    action='store_true',
    help='accept default options on future queries',
)
# Enables Python to write directly to screen (stderr)
# in case of help request.
stdout = sys.stdout
sys.stdout = sys.stderr
# Now do the actual argument parsing,
# including writing out the help message.
if '${called_from_concept}' == 'True':
    # Called from concept - Throw exception on illegal args
    args = parser.parse_args()
else:
    # Called directly - Allow what appears to be illegal args
    # (these might be known to the concept script).
    args, unknown_args = parser.parse_known_args()
# Reset stdout
sys.stdout = stdout
# Print out the arguments.
# These will be captured in the Bash 'args' variable.
print('argparse_finished=True')
# Because multiple paths and multiple attributes can be given,
# these are parsed as a single argument type, for now.
print(
    'paths_and_attributes=({})'
    .format(
        ' '.join([
            '\"{}\"'.format(path_or_attribute)
            for path_or_attribute in (args.paths + args.attributes)
        ])
    )
)
print('yes_to_defaults=\"{}\"'.format(args.yes_to_defaults))
" "$@" || echo "argparse_exit_code=$?")
# Evaluate the handled arguments into this scope
eval "${args}"
# Exit if argparse exited without finishing
if [ "${argparse_finished}" != "True" ]; then
    if [ -z "${argparse_exit_code}" ]; then
        argparse_exit_code=0
    fi
    if [ ${argparse_exit_code} -eq 0 ]; then
        trap : 0
    fi
    exit ${argparse_exit_code}
fi

# If not called indirectly through the concept script,
# call the concept script now.
if [ "${called_from_concept}" != "True" ]; then
    "${concept}" -u="${this_file}" "$@"
    trap : 0
    exit 0
fi

# If no parameter file is supplied,
# generate a default one.
param_tmp=""
if [ "${param}" == "${param_default}" ]; then
    param_tmp="${tmp_dir}/param/${start_time_human_nosep}/$(basename "${this_file}")/default"
    param="${param_tmp}"
    mkdir -p "$(dirname "${param}")"
    echo "
##############################
# Utility default parameters #
##############################
" > "${param}"
fi

# Split the paths_and_attributes array up into two separate arrays,
# one for paths and one for attributes. A path_or_attribute is
# counted as a path if the path exists.
paths=()
attributes=()
for path_or_attribute in "${paths_and_attributes[@]}"; do
    # Convert to absolute path
    path="$(absolute_path "${path_or_attribute}" "${workdir}")"
    if [ -e "${path}" ]; then
        paths=("${paths[@]}" "${path}")
    else
        attributes=("${attributes[@]}" "${path_or_attribute}")
    fi
done

# Exit if none of the supplied paths exist
if [ ${#paths[@]} == 0 ]; then
    colorprint "The supplied path does not exist" "red"
    exit 1
fi

# Get filenames of snapshots and create matching (temporary) parameter files
info="$(                                                                        \
    "${concept}"                                                                \
        -c="${command_line_params}"                                             \
        -p="${param}"                                                           \
        -u=info                                                                 \
            "$(bash_array2python_list "${paths[@]}")"                           \
            --generate-params="${tmp_dir}/param/${start_time_human_nosep}/info" \
        ${interactive_flag}                                                     \
        --local                                                                 \
        ${native_optimizations_flag}                                            \
        ${no_lto_flag}                                                          \
        ${no_optimizations_flag}                                                \
        ${pure_python_flag}                                                     \
        --rebuild=${rebuild}                                                    \
        ${unsafe_building_flag}                                                 \
)"
snapshot_filenames="$(echo "${info}" | grep -x 'Parameters.*' | grep -o '".*"')"
snapshot_param_filenames="$(                                 \
    echo "${info}"                                           \
    | grep -x 'The above parameters have been written to .*' \
    | grep -o '".*"'                                         \
)"
snapshot_param_filenames="${snapshot_param_filenames//\"/}"

# Print out which snapshots will be converted
N_snapshots="$(echo "${snapshot_filenames}" | wc -l)"
if [ ${N_snapshots} == 1 ]; then
    echo "The following snapshot will be converted:"
else
    echo "The following snapshots will be converted:"
fi
echo "${snapshot_filenames}"

# Spawning many simultaneous remote jobs which read in snapshots
# can put the file system under a lot of stress.
if [ "${remote}" == "True" ] && [ ${N_snapshots} -gt 1 ]; then
    if [ "${yes_to_defaults}" == "True" ]; then
        printf "\nA job will be submitted for each snapshot\n"
    else
        while :; do
            read -p "
Simultaneous submission of many jobs which read from disk
may put the file system under severe stress.
Would you like to submit a job for each
of the above snapshots anyway? [Y/n] " yn
            case "${yn}" in
                [Yy]*)
                    break
                    ;;
                [Nn]*)
                    trap : 0
                    exit 0
                    ;;
                "")
                    break
                    ;;
                *)
                    ;;
            esac
        done
    fi
fi

# For each snapshot, run the COùòïCEPT code and do the conversion
jobids=()
for ((i = 1; i <= N_snapshots; i += 1)); do
    # Filename of the parameter file to create and use
    param_filename="${tmp_dir}/param/${start_time_human_nosep}/$(basename "${this_file}")/$((i - 1))"
    mkdir -p "$(dirname "${param_filename}")"
    # Get the i'th snapshot and generated parameter file
    snapshot_filename="$(echo "${snapshot_filenames}" | sed "${i}q;d")"
    snapshot_param_filename="$(echo "${snapshot_param_filenames}" | sed "${i}q;d")"
    # Make temporary parameter file with everything needed
    echo "
# The special_params dict, specifying details of the utility run
special_params = {
    'special': '$(basename "${this_file}")',
    'attributes':        $(bash_array2python_list "${attributes[@]}"),
    'snapshot_filename': ${snapshot_filename},
}
# Parameter values which should always be used when running this utility
...
# Set the path to the parameter file to be the path to the actual
# parameter file specified by the user, not this auto-generated
# parameter file.
_param_ori, param = param, type(param)('${param}')
# Auto-generated parameters
$(cat "${snapshot_param_filename}")
###################
# User parameters #
###################
$(cat "${param}")
##########################
# End of user parameters #
##########################
# Reinsert original path to the parameter file
param = _param_ori
" > "${param_filename}"
    # Cleanup
    rm -f "${snapshot_param_filename}"
    # Run COùòïCEPT to do the conversion.
    # Submitted jobs should not be watched at this time.
    # Capture the jobid and exit code.
    exec 4>&1
    jobid_and_exit_code="$(                \
        "${concept}"                       \
            -c="${command_line_params}"    \
            -j="${job_directive}"          \
            -m="${main}"                   \
            -n=${nprocs}                   \
            -p="${param_filename}"         \
            -q="${queue}"                  \
            -w="${walltime}"               \
            --memory=${memory}             \
            --job-name="${jobname}"        \
            ${interactive_flag}            \
            ${local_flag}                  \
            ${native_optimizations_flag}   \
            ${no_lto_flag}                 \
            ${no_optimizations_flag}       \
            --no-watching                  \
            ${pure_python_flag}            \
            --rebuild=${rebuild}           \
            ${unsafe_building_flag}        \
        | tee >(cat >&4)                   \
        | grep "^Job "                     \
        | head -n 1                        \
        ; echo "exit_code${PIPESTATUS[0]}" \
    )"
    exec 4>&-
    exit_code="$("${python}" -B -c                                                              \
        "import re; print(re.search(r'exit_code(\d+)', '''${jobid_and_exit_code}''').group(1))" \
        2>/dev/null)" || :
    if [ -z "${exit_code}" ]; then
        colorprint "Error capturing exit code" "red"
        exit 1
    elif [ ${exit_code} != 0 ]; then
        exit ${exit_code}
    fi
    jobid="$("${python}" -B -c                                                                \
        "import re; print(re.search(r'Job .*?(\d+)', '''${jobid_and_exit_code}''').group(1))" \
        2>/dev/null)" || :
    jobids=("${jobids[@]}" "${jobid}")
    # Cleanup
    rm -f "${param_filename}"
done

# Cleanup
rm -f "${param_tmp}"
cleanup_empty_tmp

# Deactivate traps before exiting
trap : 0

# Watch remotely submitted jobs in submission order
plural=""
if [ ${N_snapshots} -gt 1 ]; then
    plural="s"
fi
if [ "${remote}" == "True" ] && [ "${no_watching}" == "False" ]; then
    printf "\nYou can now kill (Ctrl+C) this script without cancelling the job${plural}\n"
    printf "\nWill now watch the submitted job${plural}\n\n"
    for jobid in "${jobids[@]}"; do
        "${concept}" -u=watch ${jobid}
        echo
    done
else
    echo
fi

# Exit gracefully
if [ "${remote}" == "False" ] || [ "${no_watching}" == "False" ]; then
    completely_successful="True"
    for jobid in "${jobids[@]}"; do
        if [ -z "${jobid}" ]; then
            colorprint "Error capturing jobid from output" "red"
            exit 1
        fi
        if [ -f "${job_dir}/${jobid}/log_err" ]; then
            completely_successful="False"
        fi
    done
    if [ "${completely_successful}" == "True" ]; then
        colorprint "$(basename "${this_file}") utility finished successfully" "green"
    else
        echo "$(basename "${this_file}") utility finished"
    fi
else
    echo "$(basename "${this_file}") utility finished. \
Check the submitted job${plural} for results."
fi
