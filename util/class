#!/usr/bin/env bash

# This file is part of COùòïCEPT, the cosmological ùòï-body code in Python.
# Copyright ¬© 2015‚Äì2021 Jeppe Mosgaard Dakin.
#
# COùòïCEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# COùòïCEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with COùòïCEPT. If not, see https://www.gnu.org/licenses/
#
# The author of COùòïCEPT can be contacted at dakin(at)phys.au.dk
# The latest version of COùòïCEPT is available at
# https://github.com/jmd-dk/concept/



# This utility will save the processed CLASS output
# (background and perturbations) to disk.
# The saved CLASS data will be that which is necessary
# to realise the components given by the
# initial_conditions parameter.



# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Source the concept script
source "${this_dir}/../concept"

# Set up error trapping
ctrl_c() {
    trap : 0
    exit 2
}
abort() {
    exit_code=$?
    colorprint "An error occurred while using the \"$(basename "${this_file}")\" utility!" "red"
    exit ${exit_code}
}
if [ "${called_from_concept}" == "True" ]; then
    trap 'ctrl_c' SIGINT
    trap 'abort' EXIT
    set -e
fi

# Use Python's argparse module to handle command-line arguments
argparse_finished="False"
argparse_exit_code=""
args=$("${python}" -B -c "
import argparse, sys
# Function which checks whether the given gauge is valid
def gauge(value):
    def raise_argparse_exception():
        raise argparse.ArgumentTypeError(
            f\"invalid gauge '{value}'. \"
            f\"Should be one of N-body, synchronous or Newtonian.\"
        )
    value = str(value).replace('-', '').lower()
    if value not in {'nbody', 'synchronous', 'newtonian'}:
        raise_argparse_exception()
    return value
# Setup command-line arguments
parser = argparse.ArgumentParser(
    prog='$(basename "${this_file}")',
    description='Run the ${esc_concept} $(basename "${this_file}") utility',
)
parser.add_argument(
    'perturbations',
    default='',
    nargs='?',
    help=(
        'comma-separated string of CLASS species to produce perturbations/transfer '
        'functions for, e.g. \"b,cdm\" for baryons and cold dark matter. '
        'By default, only the Œ¥ transfer functions will be produced, corresponding '
        'to a Boltzmann order of 0. To also get transfer functions for variables '
        'further down the Boltzmann hierarchy, you may specify the Boltzmann order '
        'using a colon. For example, \"b:1,cdm:1\" will produce both Œ¥ and Œ∏ transfer '
        'functions for both baryons and cold dark matter. '
        'Finally, CLASS species can be combined using a plus symbol, so that e.g. '
        '\"b+cdm:1,g:0\" will result in \"total matter\" Œ¥ and Œ∏ transfer functions, '
        'along with Œ¥ transfer functions for photons.'
    ),
)
parser.add_argument(
    '--gauge',
    default='N-body',
    type=gauge,
    help='gauge of perturbations. Should be one of N-body (default), synchronous or Newtonian.',
)
parser.add_argument(
    '--ntimes',
    default='inf',
    help='maximum number of scale factor values for the tabulated perturbations',
)
# Enables Python to write directly to screen (stderr)
# in case of help request.
stdout = sys.stdout
sys.stdout = sys.stderr
# Now do the actual argument parsing,
# including writing out the help message.
if '${called_from_concept}' == 'True':
    # Called from concept - Throw exception on illegal args
    args = parser.parse_args()
else:
    # Called directly - Allow what appears to be illegal args
    # (these might be known to the concept script).
    args, unknown_args = parser.parse_known_args()
# Reset stdout
sys.stdout = stdout
# Print out the arguments.
# These will be captured in the Bash 'args' variable.
print('argparse_finished=True')
print(f'perturbations=\"{args.perturbations}\"')
print(f'gauge={args.gauge}')
print(f'ntimes={args.ntimes}')
" "$@" || echo "argparse_exit_code=$?")
# Evaluate the handled arguments into this scope
eval "${args}"
# Exit if argparse exited without finishing
if [ "${argparse_finished}" != "True" ]; then
    if [ -z "${argparse_exit_code}" ]; then
        argparse_exit_code=0
    fi
    if [ ${argparse_exit_code} -eq 0 ]; then
        trap : 0
    fi
    exit ${argparse_exit_code}
fi

# If not called indirectly through the concept script,
# call the concept script now.
if [ "${called_from_concept}" != "True" ]; then
    "${concept}" -u="${this_file}" "$@"
    trap : 0
    exit 0
fi

# If no parameter file is supplied,
# generate a default one.
param_tmp=""
if [ "${param}" == "${param_default}" ]; then
    param_tmp="${tmp_dir}/param/${start_time_human_nosep}/$(basename "${this_file}")/default"
    param="${param_tmp}"
    mkdir -p "$(dirname "${param}")"
    echo "
##############################
# Utility default parameters #
##############################
# Cosmology
a_begin = 1/(1 + 250)
" > "${param}"
fi

# Make temporary parameter file with every information needed
param_filename="${tmp_dir}/param/${start_time_human_nosep}/$(basename "${this_file}")/0"
mkdir -p "$(dirname "${param_filename}")"
echo "
# Specifications of fake components corresponding to the
# perturbations argument of the CLASS utility.
_initial_conditions = [
    {
        'name'             : class_species,
        'species'          : class_species,
        'gridsize'         : 2,
        'boltzmann_order'  : int(boltzmann_order) - 1,
        'boltzmann_closure': 'class',
    }
    for class_species, boltzmann_order in (
        perturbation.split(':') for perturbation in (
            perturbation + ('' if ':' in perturbation else ':0')
            for perturbation in (\"\"\"'${perturbations}'\"\"\"
                .replace('\"', '')
                .replace(\"'\", '')
                .replace(' ', '')
                .strip(',+')
                .split(',')
            )
            if perturbation
        )
    )
]
# Set default approximation scheme for each component
# based on their Boltzmann order.
_approximations = {
    specification['name']: {'P=wœÅ': int(specification['boltzmann_order'] + 1) < 2}
    for specification in _initial_conditions
}
# The special_params dict, specifying details of the utility run
special_params = {
    'special': '$(basename "${this_file}")',
    'ntimes':'${ntimes}',
    'gauge' : '${gauge}',
}
# Parameter values which should always be used when running this utility
...
# Set the path to the parameter file to be the path to the actual
# parameter file specified by the user, not this auto-generated
# parameter file.
_param_ori, param = param, type(param)('${param}')
###################
# User parameters #
###################
$(cat "${param}")
##########################
# End of user parameters #
##########################
# Use the fake initial conditions corresponding to the
# perturbations argument of the CLASS utility.
initial_conditions = _initial_conditions
# Merge default approximations with user approximations
try:
    select_approximations = {**_approximations, **select_approximations}
except:
    select_approximations = _approximations
# Reinsert original path to the parameter file
param = _param_ori
" > "${param_filename}"

# Run COùòïCEPT to produce the CLASS output.
# Capture the jobid and exit code.
exec 4>&1
jobid_and_exit_code="$(                \
    "${concept}"                       \
        -c="${command_line_params}"    \
        -j="${job_directive}"          \
        -m="${main}"                   \
        -n=${nprocs}                   \
        -p="${param_filename}"         \
        -q="${queue}"                  \
        -w="${walltime}"               \
        --memory=${memory}             \
        --job-name="${jobname}"        \
        ${interactive_flag}            \
        ${local_flag}                  \
        ${native_optimizations_flag}   \
        ${no_lto_flag}                 \
        ${no_optimizations_flag}       \
        ${no_watching_flag}            \
        ${pure_python_flag}            \
        --rebuild=${rebuild}           \
        ${unsafe_building_flag}        \
    | tee >(cat - >&4)                 \
    | grep "^Job "                     \
    | head -n 1                        \
    ; echo "exit_code${PIPESTATUS[0]}" \

)"
exec 4>&-
exit_code="$("${python}" -B -c                                                              \
    "import re; print(re.search(r'exit_code(\d+)', '''${jobid_and_exit_code}''').group(1))" \
    2>/dev/null)" || :
if [ -z "${exit_code}" ]; then
    colorprint "Error capturing exit code" "red"
    exit 1
elif [ ${exit_code} != 0 ]; then
    exit ${exit_code}
fi
jobid="$("${python}" -B -c                                                                \
    "import re; print(re.search(r'Job .*?(\d+)', '''${jobid_and_exit_code}''').group(1))" \
    2>/dev/null)" || :

# Cleanup
rm -f "${param_tmp}" "${param_filename}"
cleanup_empty_tmp

# Exit gracefully
echo
if [ "${remote}" == "False" ] || [ "${no_watching}" == "False" ]; then
    if [ -z "${jobid}" ]; then
        colorprint "Error capturing jobid from output" "red"
        exit 1
    fi
    if [ -f "${job_dir}/${jobid}/log_err" ]; then
        echo "$(basename "${this_file}") utility finished"
    else
        colorprint "$(basename "${this_file}") utility finished successfully" "green"
    fi
else
    echo "$(basename "${this_file}") utility finished. \
Check the submitted job for results."
fi
trap : 0
