#!/usr/bin/env bash

# This file is part of COùòïCEPT, the cosmological ùòï-body code in Python.
# Copyright ¬© 2015‚Äì2021 Jeppe Mosgaard Dakin.
#
# COùòïCEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# COùòïCEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with COùòïCEPT. If not, see https://www.gnu.org/licenses/
#
# The author of COùòïCEPT can be contacted at dakin(at)phys.au.dk
# The latest version of COùòïCEPT is available at
# https://github.com/jmd-dk/concept/



# This utility can play animations from log files
# containing 2D terminal renders.



# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Source the concept script
source "${this_dir}/../concept"

# Set up error trapping
ctrl_c() {
    printf "${esc_show_cursor}"
    trap : 0
    exit 2
}
abort() {
    exit_code=$?
    printf "${esc_show_cursor}"
    colorprint "An error occurred while using the \"$(basename "${this_file}")\" utility!" "red"
    exit ${exit_code}
}
if [ "${called_from_concept}" == "True" ]; then
    trap 'ctrl_c' SIGINT
    trap 'abort' EXIT
    set -e
fi

# Default values of command-line arguments
default_fps=5
default_path="__newest__"

# Use Python's argparse module to handle command-line arguments
argparse_finished="False"
argparse_exit_code=""
args=$("${python}" -B -c "
import argparse, sys
# Function which checks whether input is a
# representation of a positive integer.
def positive_float(value):
    def raise_argparse_exception():
        raise argparse.ArgumentTypeError(\"invalid positive float value: '{}'\".format(value))
    try:
        final_value = eval(value)
        if isinstance(final_value, str):
            final_value = eval(final_value)
        final_value = float(final_value)
    except:
        raise_argparse_exception()
    if final_value < 0:
        raise_argparse_exception()
    return final_value
# Function which checks whether input is a representation of
# a positive integer, or inf.
inf = float('inf')
def positive_int_or_inf(value):
    value_raw = value
    def raise_argparse_exception():
        raise argparse.ArgumentTypeError(\"invalid positive int value: '{}'\".format(value_raw))
    try:
        value = float(eval(value))
    except:
        raise_argparse_exception()
    if value == inf:
        return value
    if value != int(value):
        raise_argparse_exception()
    value = int(value)
    if value < 1:
        raise_argparse_exception()
    return value
# Setup command-line arguments
parser = argparse.ArgumentParser(
    prog='$(basename "${this_file}")',
    description='Run the ${esc_concept} $(basename "${this_file}") utility',
)
parser.add_argument(
    'path',
    help='log file or corresponding job ID to play',
    nargs='?',
    default='${default_path}',
)
parser.add_argument(
    '--fps',
    help='frame rate in frames/second',
    type=positive_float,
    default=${default_fps},
)
parser.add_argument(
    '--component', '--component-combination',
    help='component (combination) to play',
    default='default',
)
parser.add_argument(
    '--repeats',
    nargs='?',
    help='repeatedly play the animation indefinitely, or a specified number of times',
    type=positive_int_or_inf,
    default=1,
    const=inf,
)
# Enables Python to write directly to screen (stderr)
# in case of help request.
stdout = sys.stdout
sys.stdout = sys.stderr
# Now do the actual argument parsing,
# including writing out the help message.
if '${called_from_concept}' == 'True':
    # Called from concept - Throw exception on illegal args
    args = parser.parse_args()
else:
    # Called directly - Allow what appears to be illegal args
    # (these might be known to the concept script).
    args, unknown_args = parser.parse_known_args()
# Reset stdout
sys.stdout = stdout
# Print out the arguments.
# These will be captured in the Bash 'args' variable.
print('argparse_finished=True')
print('path=\"{}\"'.format(args.path))
print('fps={}'.format(args.fps))
print('component_combination=\"{}\"'.format(args.component))
print('repeats={}'.format(args.repeats))
" "$@" || echo "argparse_exit_code=$?")
# Evaluate the handled arguments into this scope
eval "${args}"
# Exit if argparse exited without finishing
if [ "${argparse_finished}" != "True" ]; then
    if [ -z "${argparse_exit_code}" ]; then
        argparse_exit_code=0
    fi
    if [ ${argparse_exit_code} -eq 0 ]; then
        trap : 0
    fi
    exit ${argparse_exit_code}
fi

# If not called indirectly through the concept script,
# call the concept script now.
if [ "${called_from_concept}" != "True" ]; then
    "${concept}" -u="${this_file}" "$@"
    trap : 0
    exit 0
fi

# If no path argument was supplied, play the latest log file
if [ "${path}" == "${default_path}" ]; then
    printf "No log file specified - Will play the latest"
    jobid="$(ls -t "${job_dir}" | head -n 1)"
    if [ -z "${jobid}" ]; then
        echo
        colorprint "Error: The job directory \"${job_dir}\" is empty" "red"
        exit 1
    fi
    echo " (${jobid})"
    path="${job_dir}/${jobid}/log"
fi

# Get absolute path of log file
if [ -f "${path}" ]; then
    :
elif [ -f "${job_dir}/${path}/log" ]; then
    path="${job_dir}/${path}/log"
elif [ -f "${job_dir}/${path}" ]; then
    path="${job_dir}/${path}"
elif [ -f "${path}/log" ]; then
    path="${path}/log"
else
    if [ -d "${path}" ]; then
        colorprint "Error: Directory \"${path}\" does not contain a log file" "red"
    else
        colorprint "Error: File \"${path}\" does not exist" "red"
    fi
    exit 1
fi
path="$(absolute_path "${path}" "${workdir}")"

# Use Python to extract and display the animation from the log file
"${python}" -B -c "
import itertools, re, sys
from time import sleep, time
inf = float('inf')

# Variables from Bash
path = '${path}'
fps = ${fps}
selected_component_combination = '${component_combination}'
repeats = float('${repeats}')
# The ANSI ESC character
ANSI_ESC = '\x1b'
# Read in the entire log file
with open(path, mode='r') as fname:
    text = fname.read()
# Find all 2D terminal rendered component combinations
component_combinations = []
for component_combination_match in re.finditer(
    f'Rendering 2D projection of (.+?) \\\\.{{3}}(?:\n|{ANSI_ESC})',
    text,
    flags=re.DOTALL,
):
    component_combination = component_combination_match.group(1).replace('\n', ' ')
    if component_combination in component_combinations:
        break
    else:
        component_combinations.append(component_combination)
if not component_combinations:
    print('No 2D terminal renders found', file=sys.stderr)
    sys.exit(1)
# Process the user specified component combination
# which should be played.
if selected_component_combination == 'default':
    selected_component_combination = component_combinations[0]
    if len(component_combinations) > 1:
        print(
            f'No component (combination) specified\n'
            f'- Will play the {selected_component_combination}'
        )
elif ',' in selected_component_combination:
    selected_components = set(
        [component.strip() for component in selected_component_combination.strip('{} ').split(',')]
    )
    for component_combination in component_combinations:
        components = set(
            [component.strip() for component in component_combination.strip('{}').split(',')]
        )
        if selected_components == components:
            selected_component_combination = component_combination
if selected_component_combination not in component_combinations:
    combination_str = ''
    if ',' in selected_component_combination:
        selected_component_combination = '{{{}}}'.format(selected_component_combination.strip('{} '))
        combination_str = ' combination'
    err_msg = (
        f'No 2D terminal renders found for specified component{combination_str} '
        f'\"{selected_component_combination}\" in log file \"{path}\". '
        f'The following are available:\n'
    )
    for component_combination in component_combinations:
        err_msg += f'    {component_combination}\n'
    print(err_msg, file=sys.stderr)
    sys.exit(1)
# Find the ANSI colormaps used for each componnet combination
colormaps_ANSI = {}
for component_combination, colormap_ANSI_match in zip(
        component_combinations,
        re.finditer(
            rf'({ANSI_ESC}\\]4;[0-9]{{2,3}};rgb:'
            rf'[0-9a-f]{{2}}/[0-9a-f]{{2}}/[0-9a-f]{{2}}'
            rf'{ANSI_ESC}\\\\){{238}}',
            text,
        ),
    ):
    colormap_ANSI = colormap_ANSI_match.group()
    colormaps_ANSI[component_combination] = colormap_ANSI
# Find all 2D terminal renders for each component combination
frames_dict = {component_combination: [] for component_combination in component_combinations}
for frames, frame_ANSI_MATCH in zip(
        itertools.cycle(frames_dict.values()),
        re.finditer(
            f'(({ANSI_ESC}\\\\[48;5;[0-9]{{2,3}}m )+{ANSI_ESC}\\\\[0m\n)+',
            text,
        ),
    ):
    frame_ANSI = frame_ANSI_MATCH.group()
    frames.append(frame_ANSI)
# Find the width (terminal resolution) and height
# used for each component combination.
widths, heights = {}, {}
for component_combination, frames in frames_dict.items():
    frame = frames[0]
    width = frame[:frame.index('\n')].count(' ')
    height = frame.count('\n')
    widths [component_combination] = width
    heights[component_combination] = height
# The width and height used for the specified component combination
width  = widths [selected_component_combination]
height = heights[selected_component_combination]
# Find cosmic time and scale factor for each frame.
# These are shared among all component combinations.
t_stamps = []
a_stamps = []
for match in re.finditer(
    'Rendering 2D projection of'
    '.+?'
    '(Scale factor: +[0-1]\\\\.[0-9]+?\n)?'
    '((?:Cosmic time|Time): +[^\n]+?)\n',
    text,
    flags=re.DOTALL,
):
    a_stamp = match.group(1)
    if a_stamp:
        a_stamp = re.sub(' +', ' ', a_stamp.rstrip())
        a_stamps.append(a_stamp)
    t_stamp = re.sub(' +', ' ', match.group(2))
    t_stamps.append(t_stamp)
# Construct final time stamp strings.
# All time stamp strings should have the same length,
# as otherwise they may not properly overwrite each other.
# If scale factor stamps are used, all of these should be
# printed starting from the same column. They should have
# a minimum distance of 2 towards the cosmic time stamp to
# the left, and should preferably line up with the edge of
# the terminal image to the right.
if a_stamps:
    time_stamps = []
    for t_stamp, a_stamp in zip(t_stamps, a_stamps):
        spacing = max(len(a_stamp) + 2, width - len(t_stamp))
        time_stamps.append(
            f'{{:<{len(t_stamp)}}}{{:>{spacing}}}'
            .format(t_stamp, a_stamp)
        )
else:
    time_stamps = t_stamps
stamps_max_length = 0
for time_stamp in time_stamps:
    stamp_length = len(time_stamp)
    if stamp_length > stamps_max_length:
        stamps_max_length = stamp_length
time_stamps = [f'{{:<{stamps_max_length}}}'.format(time_stamp) for time_stamp in time_stamps]
# The time between frames
frames = frames_dict[selected_component_combination]
Œît = 1/fps
# If no frame rate is set by the user, adjust the default
# so that the animation takes at least one second.
T = Œît*len(frames)
if ${fps} == ${default_fps} and T < 1:
    fps = len(frames)
    Œît = 1/fps
# Apply colormap of the specified component combination
print(colormaps_ANSI[selected_component_combination], end='')
# Play all frames of the specified component combination
# as an animation.
ANSI_ESC_left = f'{ANSI_ESC}[{width}D'
ANSI_clear_frame = f'{ANSI_ESC_left}{ANSI_ESC}[{height + 1}A'
clear_frame = lambda: print(ANSI_clear_frame)
try:
    # Hide cursor
    print(f'{ANSI_ESC}[?25l', end='')
    # Play the animation on repeat as specified
    playthrough = 0
    while playthrough < repeats:
        # Clear previous animation
        if playthrough > 0:
            clear_frame()
        playthrough += 1
        # Print each frame
        for i, (frame, time_stamp) in enumerate(zip(frames, time_stamps)):
            t0 = time()
            # Clear previous frame
            if i > 0:
                clear_frame()
            # Print the frame
            print(frame, end='')
            # Print the time stamp
            print(time_stamp, end='', flush=True)
            # Sleep to keep the frame rate
            t1 = time()
            elapsed = t1 - t0
            if elapsed < Œît:
                sleep(Œît - elapsed)
    # Print new line after the time stamp
    print()
finally:
    # Show cursor
    print(f'{ANSI_ESC}[?12l{ANSI_ESC}[?25h', end='')
"

# Exit gracefully
echo
colorprint "$(basename "${this_file}") utility finished successfully" "green"
trap : 0
