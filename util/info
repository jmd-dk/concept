#!/usr/bin/env bash

# This file is part of CO𝘕CEPT, the cosmological 𝘕-body code in Python.
# Copyright © 2015–2021 Jeppe Mosgaard Dakin.
#
# CO𝘕CEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CO𝘕CEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CO𝘕CEPT. If not, see https://www.gnu.org/licenses/
#
# The author of CO𝘕CEPT can be contacted at dakin(at)phys.au.dk
# The latest version of CO𝘕CEPT is available at
# https://github.com/jmd-dk/concept/



# This utility prints out information about snapshots.
# More specifically, it prints the meta data contained in the snapshot
# (everything except the actual component data).



# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Source the concept script
source "${this_dir}/../concept"

# Set up error trapping
ctrl_c() {
    trap : 0
    exit 2
}
abort() {
    exit_code=$?
    colorprint "An error occurred while using the \"$(basename "${this_file}")\" utility!" "red"
    exit ${exit_code}
}
if [ "${called_from_concept}" == "True" ]; then
    trap 'ctrl_c' SIGINT
    trap 'abort' EXIT
    set -e
fi

# Use Python's argparse module to handle command-line arguments
together_with_snapshot="__together_with_snapshot__"
argparse_finished="False"
argparse_exit_code=""
args=$("${python}" -B -c "
import argparse, sys
# Setup command-line arguments
parser = argparse.ArgumentParser(
    prog='$(basename "${this_file}")',
    description='Run the ${esc_concept} $(basename "${this_file}") utility',
)
parser.add_argument(
    'paths',
    nargs='+',
    help='paths to snapshots or directories of snapshots',
)
parser.add_argument(
    '--generate-params',
    nargs='?',
    help=(
        'generate parameter file(s) from snapshot(s). Where to save '
        'the parameter file(s) can be specified as the value.'
    ),
    const='${together_with_snapshot}',
    default=False,
)
parser.add_argument(
    '--stats',
    help='also compute and print out component statistics',
    default=False,
    action='store_true',
)
# Enables Python to write directly to screen (stderr)
# in case of help request.
stdout = sys.stdout
sys.stdout = sys.stderr
# Now do the actual argument parsing,
# including writing out the help message.
if '${called_from_concept}' == 'True':
    # Called from concept - Throw exception on illegal args
    args = parser.parse_args()
else:
    # Called directly - Allow what appears to be illegal args
    # (these might be known to the concept script).
    args, unknown_args = parser.parse_known_args()
# If the parsed paths argument is a string representation of a Python list,
# use this list as the list of paths directly.
if args.paths[0][0] == '[' and args.paths[0][-1] == ']':
    args.paths = eval(args.paths[0])
# Reset stdout
sys.stdout = stdout
# Print out the arguments.
# These will be captured in the Bash 'args' variable.
print('argparse_finished=True')
print('paths=({})'.format(' '.join(['\"{}\"'.format(path) for path in args.paths])))
print('generate_params={}'.format(args.generate_params))
print('stats={}'.format(args.stats))
" "$@" || echo "argparse_exit_code=$?")
# Evaluate the handled arguments into this scope
eval "${args}"
# Exit if argparse exited without finishing
if [ "${argparse_finished}" != "True" ]; then
    if [ -z "${argparse_exit_code}" ]; then
        argparse_exit_code=0
    fi
    if [ ${argparse_exit_code} -eq 0 ]; then
        trap : 0
    fi
    exit ${argparse_exit_code}
fi

# If not called indirectly through the concept script,
# call the concept script now.
if [ "${called_from_concept}" != "True" ]; then
    "${concept}" -u="${this_file}" "$@"
    trap : 0
    exit 0
fi

# If no parameter file is supplied,
# generate a default one.
param_tmp=""
if [ "${param}" == "${param_default}" ]; then
    param_tmp="${tmp_dir}/param/${start_time_human_nosep}/$(basename "${this_file}")/default"
    param="${param_tmp}"
    mkdir -p "$(dirname "${param}")"
    echo "
##############################
# Utility default parameters #
##############################
# Debugging options
allow_snapshot_multifile_singleload = True
" > "${param}"
fi

# Convert to absolute paths
for i in ${!paths[@]}; do
    paths[${i}]="$(absolute_path "${paths[${i}]}" "${workdir}")"
done

# If supplied, convert parameter directory to absolute path
# and put it in quotes.
if [ "${generate_params}" != "False" ]; then
    generate_params="'$(absolute_path "${generate_params}" "${workdir}")'"
fi

# Make temporary parameter file with every information needed
param_filename="${tmp_dir}/param/${start_time_human_nosep}/$(basename "${this_file}")/0"
mkdir -p "$(dirname "${param_filename}")"
echo "
# The special_params dict, specifying details of the utility run
special_params = {
    'special'        : '$(basename "${this_file}")',
    'generate params': ${generate_params},
    'paths'          : $(bash_array2python_list "${paths[@]}"),
    'stats'          : ${stats},
}
# Parameter values which should always be used when running this utility
...
# Set the path to the parameter file to be the path to the actual
# parameter file specified by the user, not this auto-generated
# parameter file.
_param_ori, param = param, type(param)('${param}')
###################
# User parameters #
###################
$(cat "${param}")
##########################
# End of user parameters #
##########################
# Reinsert original path to the parameter file
param = _param_ori
" > "${param_filename}"

# Run CO𝘕CEPT to printout the snapshot information.
# Always run in pure Python mode locally using 1 process,
# unless ${stats} is True.
if [ "${stats}" == "False" ]; then
    pure_python="True"
    pure_python_flag="--pure-python"
    local_flag="--local"
    remote="False"
    nprocs=1
fi
# Capture the jobid and exit code
exec 4>&1
jobid_and_exit_code="$(                \
    "${concept}"                       \
        -c="${command_line_params}"    \
        -j="${job_directive}"          \
        -m="${main}"                   \
        -n=${nprocs}                   \
        -p="${param_filename}"         \
        -q="${queue}"                  \
        -w="${walltime}"               \
        --memory=${memory}             \
        --job-name="${jobname}"        \
        ${interactive_flag}            \
        ${local_flag}                  \
        ${no_optimization_flag}        \
        ${no_watching_flag}            \
        ${pure_python_flag}            \
        --rebuild=${rebuild}           \
        ${unsafe_building_flag}        \
    | tee >(cat >&4)                   \
    | grep "^Job "                     \
    | head -n 1                        \
    ; echo "exit_code${PIPESTATUS[0]}" \
)"
exec 4>&-
exit_code="$("${python}" -B -c                                                              \
    "import re; print(re.search(r'exit_code(\d+)', '''${jobid_and_exit_code}''').group(1))" \
    2>/dev/null)" || :
if [ -z "${exit_code}" ]; then
    colorprint "Error capturing exit code" "red"
    exit 1
elif [ ${exit_code} != 0 ]; then
    exit ${exit_code}
fi
jobid="$("${python}" -B -c                                                                \
    "import re; print(re.search(r'Job .*?(\d+)', '''${jobid_and_exit_code}''').group(1))" \
    2>/dev/null)" || :

# Cleanup
rm -f "${param_tmp}" "${param_filename}"
cleanup_empty_tmp

# Exit gracefully
echo
if [ "${remote}" == "False" ] || [ "${no_watching}" == "False" ]; then
    if [ -z "${jobid}" ]; then
        colorprint "Error capturing jobid from output" "red"
        exit 1
    fi
    if [ -f "${job_dir}/${jobid}/log_err" ]; then
        echo "$(basename "${this_file}") utility finished"
    else
        colorprint "$(basename "${this_file}") utility finished successfully" "green"
    fi
else
    echo "$(basename "${this_file}") utility finished. \
Check the submitted job for results."
fi
trap : 0
