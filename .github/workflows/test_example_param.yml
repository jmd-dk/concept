# GitHub workflow for testing the example parameter files
name: test_example_param

on:
    pull_request:
        branches:
          - master
        paths:
          - 'Makefile'
          - 'concept'
          - 'param/example_**'
          - 'src/**'

jobs:
    test_example_param:
        runs-on: [self-hosted, linux, heavy]
        steps:
          - name: 🛎️ Checkout
            uses: actions/checkout@v2
          - name: 🐋 Clean dangling Docker containers
            uses: ./.github/actions/docker-clean
          - name: 📝 Set Docker username
            env:
                docker_username: ${{ secrets.DOCKER_USERNAME }}
            run: |
                [ -n "${docker_username}" ] || docker_username=jmddk
                echo "docker_username=${docker_username}" >> "${GITHUB_ENV}"
          - name: 🐋 Pull Docker image
            run: docker pull ${docker_username}/concept:latest
          - name: 🤖 Test example parameter files
            run: |
                sleep 1
                docker run \
                    -e make_jobs="-j 1" \
                    -v "${GITHUB_WORKSPACE}":/github \
                    --name "${GITHUB_REPOSITORY//\//_}__${GITHUB_WORKFLOW}__${GITHUB_JOB}__$(date +%s)" \
                    --rm \
                    ${docker_username}/concept:latest \
                    bash -O extglob -c ': \
                        && source ~/.bashrc \
                        && rm -rf "${concept_dir}/"!(dep) \
                        && cp -r /github/!(dep) "${concept_dir}/" \
                        && (cd "${concept_dir}" && make clean-job) \
                        && ( \
                               for param in "${param_dir}/example_"*; do \
                                   concept -n 4 -p "${param}" --local || exit 1; \
                                   if ls "${job_dir}/"*/log_err >/dev/null 2>&1; then \
                                       echo "Parameter file ${param} generated error messages" >&2; \
                                       exit 1; \
                                   fi; \
                               done; \
                           ) \
                    '

