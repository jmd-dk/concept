# GitHub workflow for testing the entire build,
# including installation, the test suite, the update utility,
# the example parameter files and building of the documentation.
# - This workflow runs on a schedule, and only if
#   the GitHub secret SCHEDULE_BUILD is set to True.
name: build

on:
    schedule:
      - cron: '0 0 * * SUN'  # Weekly, Sundays at 00:00

jobs:
    check_schedule:
        runs-on: ubuntu-20.04
        outputs:
            scheduled: ${{ steps.check_schedule.outputs.scheduled }}
        steps:
          - name: 📝 Check schedule
            id: check_schedule
            env:
                schedule_build: ${{ secrets.SCHEDULE_BUILD }}
            run: |
                if [ "${schedule_build}" == "True" ]; then
                    echo "Build scheduled"
                    echo "::set-output name=scheduled::1"
                else
                    echo "Build not scheduled"
                fi
    build:
        runs-on: ubuntu-20.04
        needs: check_schedule
        if: needs.check_schedule.outputs.scheduled
        steps:
          - name: 🛎️ Checkout
            uses: actions/checkout@v2
          - name: 🐋 Clean dangling Docker containers and images
            uses: ./.github/actions/docker-clean
            with:
                imgpat: "concept:latest"
          - name: 📝 Set temporary Docker image name
            run: |
                echo "docker_image=concept:latest__$(date +%s)" >> "${GITHUB_ENV}"
          - name: 🔧 Install
            run: |
                docker build \
                    -t ${docker_image} \
                    --force-rm \
                    --no-cache \
                    --pull \
                    .
          - name: 🤖 Run test suite
            run: |
                sleep 1
                docker run \
                    -e make_jobs="-j 1" \
                    --name "${GITHUB_REPOSITORY//\//_}__${GITHUB_WORKFLOW}__${GITHUB_JOB}__$(date +%s)" \
                    --rm ${docker_image} \
                    concept -t all
          - name: 🤖 Test update utility
            run: |
                sleep 1
                docker run \
                    -e make_jobs="-j 1" \
                    --name "${GITHUB_REPOSITORY//\//_}__${GITHUB_WORKFLOW}__${GITHUB_JOB}__$(date +%s)" \
                    --rm \
                    ${docker_image} \
                    bash -c ': \
                        && concept -u update current -y \
                        && concept -u update current -y --class \
                        && concept -t concept_vs_class_pm \
                    '
          - name: 🤖 Test example parameter files
            run: |
                sleep 1
                docker run \
                    --name "${GITHUB_REPOSITORY//\//_}__${GITHUB_WORKFLOW}__${GITHUB_JOB}__$(date +%s)" \
                    --rm \
                    ${docker_image} \
                    bash -c ': \
                        && source ~/.bashrc \
                        && (cd "${concept_dir}" && make clean-job) \
                        && ( \
                               for param in "${param_dir}/example_"*; do \
                                   concept -n 4 -p "${param}" --local || exit 1; \
                                   if ls "${job_dir}/"*/log_err >/dev/null 2>&1; then \
                                       echo "Parameter file ${param} generated error messages" >&2; \
                                       exit 1; \
                                   fi; \
                               done; \
                           ) \
                    '
          - name: 📖 Build documentation
            run: |
                sleep 1
                docker run \
                    --name "${GITHUB_REPOSITORY//\//_}__${GITHUB_JOB}__$(date +%s)" \
                    --rm \
                    ${docker_image} \
                    bash -c 'make clean-doc && make doc'
          - name: 🐋 Remove temporary Docker image
            run: |
                docker rmi -f ${docker_image} 2>/dev/null || :

